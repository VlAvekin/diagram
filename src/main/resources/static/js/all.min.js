//Copyright SequenceDiagram.org
var SEQ = SEQ || {};
SEQ.menu = function () {
    function a(a) {
        document.getElementById(a).style.display = "inline-block"
    }

    function b(a) {
        document.getElementById(a).style.display = "none"
    }

    function c() {
        n.presentationMode = !n.presentationMode, j();
        var a = document.getElementById("actions").style,
            b = document.getElementById("source").style,
            c = document.getElementById("handleWrapper").style,
            d = document.getElementById("diagramCanvas").style,
            f = document.getElementById("interactionCanvasWrapper").style,
            g = document.getElementById("participantCanvas").style;
        if (n.presentationMode) {
            a.display = "none",
                b.display = "none",
                c.display = "none";
            var h = window.innerWidth / 2 - document.getElementById("diagramCanvas").width / 2;
            h < 5 && (h = 5),
                d.left = h + "px",
                f.left = h + "px",
                g.left = h + "px",
                e(!1)
        } else {
            a.removeProperty("display"),
                b.removeProperty("display"),
                c.removeProperty("display"),
                d.removeProperty("left"),
                f.removeProperty("left"),
                g.removeProperty("left"),
                e(n.topBar); }
    }

    function d() {
        n.topBar = !n.topBar, j(), n.presentationMode || e(n.topBar)
    }

    function e(a) {
        var b = document.getElementById("topRight"),
            c = document.getElementsByClassName("menuButton"),
            d = document.getElementById("top"),
            ACTIONS = document.getElementById("actions"),
            f = document.getElementById("source"),
            g = document.getElementById("handleWrapper"),
            h = document.getElementById("diagramCanvas"),
            i = document.getElementById("interactionCanvasWrapper");
        if (a) {
            b.style.removeProperty("top"),
                d.style.removeProperty("display"),
                // ACTIONS.style.removeProperty("top"),
                f.style.removeProperty("top"),
                g.style.removeProperty("top"),
                h.style.removeProperty("top"),
                i.style.removeProperty("top");
            for (var j = 0; j < c.length; j++) c[j].style.removeProperty("background-color"), c[j].style.removeProperty("border-color")
        } else {
            b.style.top = "0", d.style.display = "none", ACTIONS.style.top = "5px", f.style.top = "5px", g.style.top = "5px", h.style.top = "5px", i.style.top = "5px";
            for (var k = 0; k < c.length; k++) c[k].style.backgroundColor = "#d3d3d3", c[k].style.borderColor = "#d3d3d3"
        }
        SEQ.interactor.onWindowScroll()
    }

    function f() {
        n.participantOverlay = !n.participantOverlay, j();
        var a = SEQ.main.getParticipantCanvas();
        n.participantOverlay ? a.style.display = "block" : a.style.display = "none", SEQ.interactor.onWindowScroll()
    }

    function g(a, b) {
        var c = document.getElementById(a);
        h(c.innerHTML), b.innerHTML = "copied", setTimeout(function () {
            b.innerHTML = "copy wallet address"
        }, 1e3)
    }

    function h(a) {
        var b = document.createElement("textarea");
        b.style.position = "fixed", b.style.top = 0, b.style.left = 0, b.style.width = "2em", b.style.height = "2em", b.style.padding = 0, b.style.border = "none", b.style.outline = "none", b.style.boxShadow = "none", b.style.background = "transparent", b.value = a, document.body.appendChild(b), b.select(), document.execCommand("copy"), document.body.removeChild(b)
    }

    function i() {
        var a = {defaultSaveLocationLocalStorage: !1},
            b = localStorage.getItem("SEQUENCE_DIAGRAM_ORG_INTERNAL_SETTINGS");
        return b && (a = JSON.parse(b)), a.defaultSaveLocationLocalStorage
    }

    function j() {
        function a(a, b) {
            var c, d;
            a.id.indexOf("Radio") != -1 ? (c = "◉", d = "⭘") : (c = "☑", d = "☐"), b ? a.innerHTML = c : a.innerHTML = d
        }

        a(document.getElementById("presentationModeCheckbox"), n.presentationMode), a(document.getElementById("topBarCheckbox"), n.topBar), a(document.getElementById("participantOverlayCheckbox"), n.participantOverlay);
        var b = i();
        a(document.getElementById("defaultSaveLocationLocalStorageRadioButton"), b), a(document.getElementById("defaultSaveLocationDownloadFolderRadioButton"), !b)
    }

    function k(a) {
        var b = {}, c = localStorage.getItem("SEQUENCE_DIAGRAM_ORG_INTERNAL_SETTINGS");
        c && (b = JSON.parse(c)), b.defaultSaveLocationLocalStorage = a, localStorage.setItem("SEQUENCE_DIAGRAM_ORG_INTERNAL_SETTINGS", JSON.stringify(b)), j()
    }

    function l(a) {
        m && clearInterval(m);
        var b = 0, c = !0, d = document.getElementById("notification");
        d.innerHTML = a, m = setInterval(function () {
            if (c) {
                b += .1, b > 1.5 && (c = !1);
                var a = b;
                b > 1 && (a = 1), d.style = "display: block; opacity: " + a
            } else b -= .1, b > 0 ? d.style = "display: block; opacity: " + b : (d.style = "display: none;", clearInterval(m))
        }, 40)
    }

    var m, n = {presentationMode: !1, topBar: !0, participantOverlay: !1};
    return {
        init: function () {
            j()
        },
        showMenu: a,
        hideMenu: b,
        toggleTopBar: d,
        togglePresentationMode: c,
        toggleParticipantOverlay: f,
        copyToClipboard: g,
        defaultSaveLocationLocalStorage: k,
        isDefaultSaveLocationLocalStorage: i,
        displayNotification: l,
        isParticipantOverlay: function () {
            return n.participantOverlay
        }
    }
}();
var SEQ = SEQ || {};
SEQ.main = function () {
    function a(a) {
        ya = a
    }

    function b(a, b) {
        if (ba()) return a && b && (Da = Ba ? Ca(a, b, "svg") : Ca(a, b)), Da;
        var c = document.getElementById("diagramCanvas");
        return a && b && (c.width = a, c.height = b), c
    }

    function c() {
        return za || (za = ba() ? Ca() : document.createElement("canvas")), za
    }

    function d() {
        return c().getContext("2d")
    }

    function e() {
        return ya ? ya : b().getContext("2d")
    }

    function f() {
        return document.getElementById("interactionCanvas")
    }

    function g() {
        return f().getContext("2d")
    }

    function h() {
        return document.getElementById("participantCanvas")
    }

    function i() {
        return ba() ? Ca() : document.createElement("canvas")
    }

    function j() {
        if (!ba()) return rbush()
    }

    function k() {
        return h().getContext("2d")
    }

    function l(a) {
        var b = fa.getScrollInfo();
        fa.setValue(a), fa.scrollTo(b.left, b.top)
    }

    function m(a, b) {
        if (wa.length > 0) var c = wa[wa.length - 1];
        a != c && (b || (xa = []), wa.push(a)), wa.length >= 200 && wa.shift()
    }

    function n(a) {
        if (xa.length > 0) var b = xa[xa.length - 1];
        a != b && xa.push(a), xa.length >= 200 && xa.shift()
    }

    function o() {
        if (wa.length >= 2) {
            var a = wa.pop();
            n(a);
            var b = wa.pop();
            l(b), SEQ.parser.parse(!0)
        }
    }

    function p() {
        if (xa.length > 0) {
            var a = xa.pop();
            l(a), SEQ.parser.parse(!0)
        }
    }

    function q(a) {
        var b = SEQ.parser.diagram.fontFamily;
        return a + "pt " + b
    }

    function r(a) {
        return a + "pt mono"
    }

    function s(a) {
        ua.INCREASE === a ? pa < 72 && (pa++, SEQ.parser.parse()) : ua.DECREASE === a && pa > 4 && (pa--, SEQ.parser.parse())
    }

    function t() {
        document.getElementById("cover").style.display = "none";
        var a = document.getElementById("imageSavePopup");
        a && (a.style.display = "none");
        var b = document.getElementById("infoPopup");
        b && (b.style.display = "none");
        var c = document.getElementById("shareUrlPopup");
        c && (c.style.display = "none");
        var d = document.getElementById("instructionsPopup");
        d && (d.style.display = "none")
    }

    function u() {
        var a, c = b(), d = v().imgtype, e = v().imgquality;
        a = d && e ? c.toDataURL(d, parseFloat(e.replace("#", ""))) : c.toDataURL();
        var f = document.getElementById("imageDiv"), g = document.getElementById("diagramImage");
        g && f.removeChild(g);
        var h = 800 / c.width, i = 600 / c.height, j = h < i ? h : i, k = document.createElement("img");
        k.src = a, k.style.width = j * c.width + "px", k.style.height = j * c.height + "px", k.id = "diagramImage", f.appendChild(k), document.getElementById("cover").style.display = "block", document.getElementById("imageSavePopup").style.display = "block"
    }

    function v() {
        var a = {};
        return window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function (b, c, d) {
            a[c] = d
        }), a
    }

    function w() {
        var a = "no title";
        return SEQ.parser.diagram.title ? a = SEQ.parser.diagram.title.title : SEQ.parser.diagram.frame && (a = SEQ.parser.diagram.frame.text), a.replace(/[^a-zA-Z0-9\s\-]/, "")
    }

    function x() {
        var a = V(), b = LZString.compressToEncodedURIComponent(a), c = encodeURIComponent(a), d = window.location.href;
        d.indexOf("index.html") > -1 && (d = d.substring(0, d.indexOf("index.html"))), d.indexOf("#") > -1 && (d = d.substring(0, d.indexOf("#"))), "/" !== d.substring(d.length - 1, d.length) && (d += "/");
        var e = d + "index.html#initialData=" + b, f = d + "index.html#initialData=" + c,
            g = document.getElementById("titledLinkCompressed");
        g.innerHTML = w(), g.href = e;
        var h = document.getElementById("rawLinkCompressed");
        h.value = e, h.setSelectionRange(0, h.value.length), h.focus();
        var i = document.getElementById("titledLinkUriEncoded");
        i.innerHTML = w(), i.href = f;
        var j = document.getElementById("rawLinkUriEncoded");
        j.value = f, j.setSelectionRange(0, j.value.length), j.focus(), document.getElementById("cover").style.display = "block", document.getElementById("shareUrlPopup").style.display = "block"
    }

    function y() {
        var a = v().initialData, c = v().format;
        if (!a && window.location.hash) {
            var d = window.location.hash.substring(1);
            d.indexOf("initialData=") > -1 && (a = d.replace("initialData=", ""))
        }
        if (a) if (0 === a.indexOf("http://") || 0 === a.indexOf("https://") || 0 === a.indexOf("file://")) {
            var e = new XMLHttpRequest;
            e.open("GET", a, !0), e.onreadystatechange = function () {
                if (4 == this.readyState && 200 == this.status && (SEQ.main.updateSource(this.responseText), SEQ.parser.parse(), "png" === c)) {
                    var a = b();
                    window.location.href = a.toDataURL("image/png")
                }
            }, e.send()
        } else if (a.indexOf("%") > 0) {
            var f = decodeURIComponent(a);
            SEQ.main.updateSource(f)
        } else {
            var g = LZString.decompressFromEncodedURIComponent(a);
            SEQ.main.updateSource(g)
        } else {
            var h = "C4S2BsFMAIBUAsQGdrOgQ2qCkBQuBBcEAY0gFoA+AIQHsAjALgGFiSBrDAOwBNoeATugDmWWtBIDI6YDExSAjgFdISYNFoCAOl2ABPAA4wwqLlngwktJQLIYpmYOOAXoUAGbBCbSAB5y5HRMgiJi0AC2tABueFy0shoxAtBBADQAItb0UBJsnE7QkDwmsgAewCx55jAAVDUA-HWoJLRm7prQdSBcagJKJKCtSE3ovJ01kKXo4QZQwzW4QVQAFADMAJSZStkwJFUFRSWTFXFc5N1qo8CjkNYo4apIIpBAA",
                i = LZString.decompressFromEncodedURIComponent(h);
            SEQ.main.updateSource(i)
        }
    }

    function z() {
        return q(pa)
    }

    function A() {
        return pa + "pt sans-serif"
    }

    function B() {
        return q(pa * qa)
    }

    function C() {
        return q(pa * ra)
    }

    function D() {
        return r(pa)
    }

    function E() {
        return r(pa * qa)
    }

    function F() {
        return r(pa * ra)
    }

    function G(a) {
        return r(pa * (a / oa))
    }

    function H(a) {
        return q(pa * (a / oa))
    }

    function I(a) {
        return SEQ.metrics.data.textLineHeight * (a / oa)
    }

    function J() {
        return SEQ.metrics.data.textLineHeight * qa
    }

    function K() {
        return SEQ.metrics.data.textLineHeight * ra
    }

    function L() {
        return q(pa * sa)
    }

    function M() {
        return pa * ta
    }

    function N() {
        return M() + "pt FontAwesome"
    }

    function O() {
        return M() + "pt MaterialDesignIcons"
    }

    function P() {
        return pa
    }

    function Q(a) {
        if (SEQ.main.isRunningNode()) return SEQ.parser.parse(null, a);
        if (!SEQ.interactor.editEntryTextAreaActive()) {
            ea && clearTimeout(ea);
            var b = [];
            a = V();
            for (var c = a.split("\n"), d = 0; d < c.length; d++) {
                var e = c[d];
                e.indexOf(SEQ.entityParticipant.Type.FONT_AWESOME) > -1 ? b.indexOf("10pt FontAwesome") == -1 && b.push("10pt FontAwesome") : e.indexOf(SEQ.entityParticipant.Type.MATERIAL_DESIGN_ICONS) > -1 && b.indexOf("10pt MaterialDesignIcons") == -1 && b.push("10pt MaterialDesignIcons")
            }
            if (va.forEach(function (a) {
                var c = b.indexOf(a);
                c > -1 && b.splice(c, 1)
            }), b.length > 0) {
                var f = [];
                b.forEach(function (a) {
                    f.push(document.fonts.load(a))
                }), Promise.all(f).then(function () {
                    b.forEach(function (a) {
                        va.push(a)
                    }), ea = setTimeout(function () {
                        SEQ.main.parse(a)
                    }, 50)
                })
            } else ea = setTimeout(function () {
                SEQ.parser.parse(null, a)
            }, 50)
        }
    }

    function R(a) {
        fa.clearGutter("errors");
        var b = [];
        a.forEach(function (a) {
            fa.setGutterMarker(a.lineNumber, "errors", S()), b.push({
                from: {line: a.lineNumber, ch: 0},
                to: {line: a.lineNumber, ch: 0}
            })
        }), Ea.update(b)
    }

    function S() {
        var a = document.createElement("div");
        return a.style.color = "red", a.innerHTML = "⊠", a
    }

    function T(a) {
        var b = fa.getValue() + a;
        l(b), Q()
    }

    function U(a) {
        var b = a + fa.getValue();
        l(b), Q()
    }

    function V() {
        return fa.getValue()
    }

    function W() {
        return fa.getInputField().blur()
    }

    function X() {
        return fa.getInputField().focus()
    }

    function Y(a, b, c) {
        fa.setSelection({line: a, ch: b}, {line: a, ch: c})
    }

    function Z(a) {
        var b = a.clientX - ha, c = a.clientY - ia;
        ga.style.width = ja + b + "px", ga.style.top = ka + c + "px", fa.setSize(la + b + "px", ma + c + "px"), a.preventDefault()
    }

    function $(a) {
        ha = a.clientX, ia = a.clientY, ja = parseInt(ga.style.width, 10), ka = parseInt(ga.style.top, 10);
        var b = document.getElementsByClassName("CodeMirror")[0];
        la = parseInt(b.style.width, 10), ma = parseInt(b.style.height, 10), document.addEventListener("mousemove", Z), document.addEventListener("mouseup", _), a.preventDefault()
    }

    function _(a) {
        document.removeEventListener("mousemove", Z), document.removeEventListener("mouseup", _), a.preventDefault()
    }

    function aa() {
        CodeMirror.commands.autocomplete = function (a) {
            a.showHint({hint: CodeMirror.hint.seqdiahint, completeSingle: !1})
        }, fa = CodeMirror(document.getElementById("source"), {
            value: "# Loading...",
            styleActiveLine: {nonEmpty: !0},
            lineNumbers: !0,
            lineWrapping: !0,
            extraKeys: {"Ctrl-Space": "autocomplete", "Ctrl-F": "findPersistent", "Cmd-F": "findPersistent"},
            gutters: ["CodeMirror-linenumbers", "errors"],
            undoDepth: 0
        }), Ea = fa.annotateScrollbar({className: "CodeMirror-error-scrollbar"}), fa.on("change", function (a, b) {
            Q()
        }), fa.on("inputRead", function (a, b) {
            "cut" != b.origin && "paste" != b.origin && CodeMirror.commands.autocomplete(a)
        });
        var a = 377, b = 600;
        fa.setSize(a + "px", b + "px"), ga = document.getElementById("handle"), ga.style.width = a + "px", ga.style.top = b + "px", ga.addEventListener("mousedown", $)
    }

    function ba() {
        return Aa
    }

    function ca(a) {
        var b = oa * a;
        b < 2 && (b = 2), pa = parseInt(b)
    }

    function da() {
        pa = oa
    }

    var ea, fa, ga, ha, ia, ja, ka, la, ma, na = !1, oa = 11, pa = oa, qa = .8, ra = 1.2, sa = 1.5, ta = 4,
        ua = {INCREASE: "+", DECREASE: "-"}, va = [], wa = [], xa = [], ya = null, za = null, Aa = !1, Ba = !1,
        Ca = null, Da = null, Ea = null;
    return {
        initBackend: function (a) {
            Aa = !0, Ca = a
        },
        exportNodeDiagram: function (a, b, c, d, e) {
            switch (Da = Ca(), b) {
                case"image/png":
                    Ba = !1, ca(c), Q(a), Da.toDataURL(b, e);
                    break;
                case"image/jpeg":
                    Ba = !1, ca(c), Q(a), Da.toDataURL(b, d, e);
                    break;
                case"image/svg+xml":
                    Ba = !0, ca(c), Q(a), e(null, "data:image/svg+xml;base64," + Da.toBuffer().toString("base64"));
                    break;
                default:
                    e("Unsupported MIME type: " + b)
            }
            da()
        },
        init: function () {
            na = navigator.userAgent.toLowerCase().indexOf("firefox") > -1, SEQ.seqDiaHint.init(), SEQ.seqDiaMode.init(), aa(), SEQ.interactor.init(), SEQ.contextMenu.init(), SEQ.menu.init(), window.addEventListener("message", function (a) {
                if ("connect" === a.data.action) {
                    var c = a.data.extensionId;
                    console.log("sequencediagramorg connecting to " + c);
                    var d = chrome.runtime.connect(c);
                    d.onMessage.addListener(function (a) {
                        console.log("sequencediagramorg received ", a);
                        var c = {action: a.action};
                        "EXPORT_SOURCE" === a.action ? c.result = V() : "EXPORT_PNG" === a.action ? c.result = b().toDataURL("image/png") : "EXPORT_SVG" === a.action ? c.result = SEQ.saveAndOpen.paintSvgCanvas() : c.result = "unknown action", d.postMessage(c)
                    })
                }
            }, !1)
        },
        parse: Q,
        getDiagramContext: e,
        getDiagramCanvas: b,
        getSourceValue: V,
        selectInSource: Y,
        blurEditor: W,
        focusEditor: X,
        getInteractionCanvas: f,
        getInteractionContext: g,
        getMeasurementCanvas: c,
        getMeasurementContext: d,
        getMetricsCanvas: i,
        createRBush: j,
        getParticipantCanvas: h,
        getParticipantContext: k,
        FontChange: ua,
        changeFontSize: s,
        exportDiagram: u,
        closeDiagramImagePopup: t,
        getFontSize: P,
        getFontSansSerifNormal: A,
        getFontNormal: z,
        getFontSmall: B,
        getFontBig: C,
        getFontMonoNormal: D,
        getFontMonoSmall: E,
        getFontMonoBig: F,
        getFontMonoNumeric: G,
        getFontNumeric: H,
        getLineHeightFontNumeric: I,
        getLineHeightFontSmall: J,
        getLineHeightFontBig: K,
        getFontTitle: L,
        getFontFontAwesome: N,
        getFontMaterialDesignIcons: O,
        getFontIconSize: M,
        fontSizeTitleRatio: sa,
        createShareUrl: x,
        loadInitialData: y,
        updateSyntaxErrors: R,
        updateSource: l,
        pushUndoChange: m,
        undoChange: o,
        redoChange: p,
        appendToSource: T,
        prependToSource: U,
        setCanvasToSvgContext: a,
        isRunningNode: ba,
        createDiagramName: w
    }
}();
var SEQ = SEQ || {};
SEQ.metrics = function () {
    function a(a) {
        return b(a, "Pp", SEQ.main.getFontSize())
    }

    function b(a, b, c) {
        function d() {
            for (var a = 0; a < g; a++) for (var b = 0; b < h; b++) {
                var c = 4 * (a * h + b);
                if (0 != j[c]) return a
            }
            return 0
        }

        function e() {
            for (var a = g - 1; a > 0; a--) for (var b = 0; b < h; b++) {
                var c = 4 * (a * h + b);
                if (0 != j[c]) return a
            }
            return g
        }

        var f = SEQ.main.getMetricsCanvas(), g = 2 * c, h = 2 * c;
        f.height = g, f.width = h;
        var i = f.getContext("2d");
        i.fillRect(0, 0, h, g), i.textBaseline = "top", i.fillStyle = "white", i.font = a, i.fillText(b, 0, 0);
        var j = i.getImageData(0, 0, h, g).data;
        return e() - d()
    }

    function c(a, b) {
        var c, d = SEQ.main.getDiagramContext();
        return b ? (d.save(), d.font = b, c = d.measureText(a), d.restore()) : c = d.measureText(a), c.width
    }

    function d() {
        var b = SEQ.main.getFontNormal(), c = 1.2565541 * a(b);
        if (!SEQ.main.isRunningNode()) {
            var d = SEQ.main.getInteractionContext();
            d.font = b
        }
        var g = SEQ.main.getDiagramContext();
        g.font = b, e.textLineHeight = c, e.textOutlineWidth = c / 4, e.textBackgroundPadding = .15 * c;
        var h = SEQ.main.getFontSansSerifNormal(), i = 1.2565541 * a(h);
        e.baseSpaceMetric = i, e.textTopBottomPadding = .3 * i, e.fragmentTextPosYOffset = .4 * i, e.entityMarginTop = i * f.spacingRation * SEQ.parser.diagram.entrySpacingRatio, e.textPadding = i / 2, e.boxBleed = .9 * i, e.entryMarginSide = i / 2, e.diagramMarginTop = i / 2, e.diagramMarginBottom = 3.5 * i, e.diagramLifeLineDashSize = i / 1.3, e.diagramLifeLineSpaceSize = i / 3, e.diagramLifeLineWeight = i / 12, e.diagramLineWeight = i / 12, e.participantMarginTop = i / 2, e.participantMarginSide = i / 2, e.participantMarginBottom = i / 2, e.participantPadding = i, e.participantTopBottomPadding = .7 * i, e.participantImageHeight = 4.5 * i, e.participantTypeLineWeight = .17 * i, e.participantBoxLineWeight = .16 * i, e.participantDestroySize = 1.8 * i, e.participantDestroyLineWeight = .16 * i, e.participantSpecialCollisionSpace = i, e.messageSelfRefHeight = i, e.messageSelfRefWidth = 4 * i, e.messageSelfRefSideMargin = i / 2, e.messageArrowWidth = i / 1.2, e.messageLineDashWidth = i / 2.5, e.messageInteractionMargin = .15 * i, e.messageCreatorInteractionMargin = .1 * i, e.messageCreatorPosDiffThreshold = .2 * i, e.dragAndDropInteractionMargin = 3 * i, e.dividerMinimumLineWidth = i, e.dividerLineSpacing = i / 3, e.fragmentLineWeight = i / 7, e.fragmentBleed = 3.5 * i, e.fragmentMarginSide = i, e.fragmentOperandLineDashWidth = i / 4, e.fragmentLabelEdgeLength = .6 * i, e.fragmentLabelSmallHeight = .6 * i, e.fragmentLabelSidePadding = i, e.fragmentHeight = 1.2 * i, e.fragmentTextSideMargin = i, e.collisionBleed = i / 3, e.fragmentCollisionLineCompensation = i / 2, e.entryMoverXCollisionWidth = i, e.entryMoverThreshold = i / 3, e.activationSideWidth = i / 2, e.activationAfterHeight = 1.2 * i, e.participantGroupPadding = i / 2, e.participantBottomMargin = 2.1 * i, e.frameMargin = 1.6 * i, e.frameMarginCanvas = i / 2, e.frameHeight = 1.4 * i, e.frameLabelSidePadding = i, e.frameLabelEdgeLength = .7 * i, e.frameLabelSmallHeight = .7 * i, e.frameTextPosYOffset = .45 * i
    }

    var e = {}, f = {entrySpacingRatio: 1, spacingRation: 1.5};
    return {setupAllMetrics: d, calcWidth: c, calcHeight: b, data: e, constants: f}
}();
var SEQ = SEQ || {};
SEQ.parser = function () {
    function a(a, g) {
        function h(a) {
            for (var g = a; g < x.length; g++) {
                var l, v = x[g];
                if (l = SEQ.entityTitle.parse(v)) q.title = l, b(l); else if (l = SEQ.entityFontFamily.parse(v)) q.fontFamily = l.fontFamily, SEQ.metrics.setupAllMetrics(), b(l); else if (l = SEQ.entityEntrySpacing.parse(v)) q.entrySpacingRatio = l.entrySpacing, SEQ.metrics.setupAllMetrics(), b(l); else if (l = SEQ.entityParticipantSpacing.parse(v)) q.participantSpacing = l.participantSpacing, b(l); else if (l = SEQ.entityFontSize.parse(v)) b(l); else if (l = SEQ.entityMessage.parse(v, u, i, s, t)) b(l), i && s++; else if (l = SEQ.entityAutoNumber.parse(v)) i = l.enabled, i && (isNaN(l.value) || (s = l.value)), b(l); else if (l = SEQ.entityLinear.parse(v)) t = l.enabled, b(l); else if (l = SEQ.entityParallel.parse(v)) u = l.enabled, b(l); else if (l = SEQ.entityNoteBoxLeftRight.parse(v, u)) b(l); else if (l = SEQ.entityNoteBoxOver.parse(v, u)) b(l); else if (l = SEQ.entityParticipant.parse(v, g, h)) {
                    if (b(l), l.loadingImage) return
                } else (l = SEQ.entityDivider.parse(v)) ? b(l) : (l = SEQ.entityFragment.parse(v)) ? b(l) : (l = SEQ.entityActivation.parse(v)) ? b(l) : (l = SEQ.entitySpace.parse(v)) ? b(l) : (l = SEQ.entityCreateDestroy.parse(v)) ? b(l) : (l = SEQ.entityActiveColor.parse(v)) ? b(l) : (l = SEQ.entityLifeLineColor.parse(v)) ? b(l) : (l = SEQ.entityLifeLineWeight.parse(v)) ? b(l) : (l = SEQ.entityParticipantGroup.parse(v)) ? b(l) : (l = SEQ.entityFrame.parse(v)) ? (q.frame = l, b(l)) : (b({raw: v}), o.exec(v) || p.exec(v) || q.errors.push({
                    lineNumber: g,
                    line: v
                }))
            }
            c(), d(), e(), f(), j(), k(), SEQ.main.isRunningNode() || (m(), SEQ.main.updateSyntaxErrors(q.errors));
            for (var w in r) if (r.hasOwnProperty(w)) {
                var y = r[w];
                y.inUse || delete r[w]
            }
            SEQ.painter.paint(), n.ongoing = !1
        }

        SEQ.main.isRunningNode() || SEQ.interactor.cancelAllInteraction(), q.entrySpacingRatio = SEQ.metrics.constants.entrySpacingRatio, q.fontFamily = "sans-serif", SEQ.metrics.setupAllMetrics(), n.ongoing = !0, q.entries = [], q.errors = [], q.participantsByName = {}, q.participants = [], q.ongoingFragments = [], q.fragments = [], q.ongoingActivations = {}, q.title = null, q.frame = null, q.createdParticipantNames = {}, q.ongoingParticipantGroups = [], q.participantGroups = [], q.participantSpacing = 0, q.participantMaxHeight = SEQ.metrics.data.textLineHeight + SEQ.metrics.data.textTopBottomPadding + 2 * SEQ.metrics.data.participantTopBottomPadding + SEQ.metrics.data.participantTypeLineWeight, q.participantActiveColor = null, q.participantLifeLineColor = null, q.participantLifeLineWeight = null, q.maxParticipantGroupHeight = 0, q.collisionTypeAreas = SEQ.main.createRBush();
        var i = !1, s = 1, t = !1, u = !1;
        for (var v in r) if (r.hasOwnProperty(v)) {
            var w = r[v];
            w.inUse = !1
        }
        SEQ.main.isRunningNode() || (g = SEQ.main.getSourceValue()), SEQ.main.pushUndoChange(g, a);
        var x = g.split("\n");
        l(x), h(0)
    }

    function b(a) {
        a.type && a.type != SEQ.entityParticipant.Type.PARTICIPANT && (SEQ.entityFragment.populateEnclosingCollapsedFragment(a), a.enclosingCollapsedFragment || (a.fromParticipantName && SEQ.entityParticipant.storeParticipantWithDefinedWidths(a.fromParticipantName), a.toParticipantName && SEQ.entityParticipant.storeParticipantWithDefinedWidths(a.toParticipantName)), a.snapshot = {
            ongoingActivations: JSON.parse(JSON.stringify(q.ongoingActivations)),
            ongoingFragments: q.ongoingFragments.slice()
        }), q.entries.push(a)
    }

    function c() {
        if (q.participants.length > 0) {
            var a = q.participantsByName[SEQ.entityParticipant.specialParticipant.LEFT_PARTICIPANT];
            if (a) {
                var b = q.participants.indexOf(a);
                q.participants.splice(b, 1), q.participants.unshift(a)
            }
            var c = q.participantsByName[SEQ.entityParticipant.specialParticipant.RIGHT_PARTICIPANT];
            c && (q.participants.splice(q.participants.indexOf(c), 1), q.participants.push(c))
        }
    }

    function d() {
        var a;
        q.entries.forEach(function (b) {
            b.type && b.type != SEQ.entityParticipant.Type.PARTICIPANT && (b.updateParticipantWidths && !b.enclosingCollapsedFragment && b.updateParticipantWidths(b), b.updateActivationPosDiff && b.updateActivationPosDiff(b), b.updateEnclosingFragments && b.updateEnclosingFragments(b), b.enclosingCollapsedFragment || a && b.type === SEQ.entityActivation.Type.ACTIVATE && a.message && (b.fromParticipantName == a.fromParticipantName || b.fromParticipantName == a.toParticipantName) && (a.updateActivationPosDiff && a.updateActivationPosDiff(a, b), a.updateEnclosingFragments && a.updateEnclosingFragments(a), a.updateParticipantWidths && a.updateParticipantWidths(a)), b.activation || (a = b))
        })
    }

    function e() {
        q.participants.length > 0 ? (SEQ.entityFragment.updateParticipantWidths(), g()) : q.title || (q.title = SEQ.entityTitle.parse("title Empty diagram, click the ? icon for instructions and examples"))
    }

    function f() {
        q.entries.forEach(function (a) {
            a.reCalcTotalHeight && a.reCalcTotalHeight()
        })
    }

    function g() {
        var a = 0, b = q.participants;
        if (q.frame && (a += SEQ.metrics.data.frameMargin), q.participantSpacing == SEQ.entityParticipantSpacing.equal) {
            for (var c = 0, d = 0; d < b.length; d++) {
                var e = h(d);
                e.largestSideWidth > c && (c = e.largestSideWidth)
            }
            for (var f = 0; f < b.length; f++) f > 0 ? (a += c, b[f].posX = a) : (a += h(f).largestSideWidth, b[f].posX = a)
        } else for (var g = 0; g < b.length; g++) {
            var i = g > 0 ? b[g - 1] : null, j = b[g], k = h(g), l = k.largestSideWidth,
                m = k.participantsWidth - SEQ.metrics.data.participantMarginSide, n = l - m;
            i && q.participantSpacing * SEQ.metrics.constants.spacingRation > n / SEQ.metrics.data.baseSpaceMetric && (l = q.participantSpacing * SEQ.metrics.data.baseSpaceMetric * SEQ.metrics.constants.spacingRation + m), a += l, j.posX = a
        }
    }

    function h(a) {
        var b = q.participants, c = a > 0 ? b[a - 1] : null, d = b[a],
            e = (c ? c.width / 2 + SEQ.metrics.data.participantMarginSide + c.outerRightWidth : 0) + d.width / 2 + SEQ.metrics.data.participantMarginSide + d.outerLeftWidth,
            f = 0;
        if (c && (c.outerRightWidth || d.outerLeftWidth)) {
            var g = c.entityRightWidth + d.width / 2 + d.outerLeftWidth,
                h = d.entityLeftWidth + c.width / 2 + c.outerRightWidth;
            f = g > h ? g : h
        } else f += c && c.entityRightWidth > d.entityLeftWidth ? c.entityRightWidth : d.entityLeftWidth, c && (f += c.timelineRightWidth), f += d.timelineLeftWidth;
        var i = Math.max(e, f);
        return {participantsWidth: e, entitiesWidth: f, largestSideWidth: i}
    }

    function i(a) {
        return a in SEQ.parser.diagram.participantsByName
    }

    function j() {
        for (var a, b = 0, c = [], d = q.entries.length - 1; d >= 0; d--) {
            var e = q.entries[d];
            if (e.type) if (e.fromParticipantName === e.toParticipantName ? e.totalHeight - SEQ.metrics.data.messageSelfRefHeight > b && (b = e.totalHeight - SEQ.metrics.data.messageSelfRefHeight) : e.totalHeight > b && (b = e.totalHeight), e.linearWithPrevious) c.push(e); else {
                a && a.linearWithPrevious && c.push(e);
                var f = {maxHeight: b, selfRefHeight: 0};
                c.length > 0 && c.forEach(function (a) {
                    a.fromParticipantName === a.toParticipantName && (f.selfRefHeight = SEQ.metrics.data.messageSelfRefHeight), a.linearData = f
                }), b = 0, c = []
            }
            a = e
        }
    }

    function k() {
        function a(a, c) {
            a.type && a.type != SEQ.entityParticipant.Type.PARTICIPANT ? a.parallel && c && c.parallel ? a.position.posY = b : a.linearData ? (a.linearWithPrevious || (b += a.topMargin + a.linearData.maxHeight + a.linearData.selfRefHeight), a.fromParticipantName === a.toParticipantName ? a.position.posY = b : a.position.posY = b - a.linearData.selfRefHeight) : (b += a.topMargin + a.totalHeight, a.position.posY = b, c && (a.type === SEQ.entityActivation.Type.ACTIVATE && c.delayHeight && c.fromParticipantName === a.fromParticipantName && (a.position.posY -= c.delayHeight), a.type === SEQ.entityActivation.Type.ACTIVATE && c.participantToCreate && c.fromParticipantName === a.fromParticipantName && (a.position.posY -= c.participantToCreate.height / 2), a.type !== SEQ.entityActivation.Type.DEACTIVATE && a.type !== SEQ.entityActivation.Type.DEACTIVATE_AFTER || !c.delayHeight || c.fromParticipantName !== a.fromParticipantName || (a.position.posY -= c.delayHeight), a.type !== SEQ.entityActivation.Type.DEACTIVATE && a.type !== SEQ.entityActivation.Type.DEACTIVATE_AFTER || !c.participantToCreate || c.fromParticipantName !== a.fromParticipantName || (a.position.posY -= c.participantToCreate.height / 2))) : (a.position || (a.position = {}), a.position.posY = b)
        }

        var b = SEQ.metrics.data.diagramMarginTop + q.participantMaxHeight + SEQ.metrics.data.participantMarginTop,
            c = 0;
        q.participantGroups.forEach(function (a) {
            var b = a.calcHeight();
            b > c && (c = b)
        }), b += c, q.maxParticipantGroupHeight = c;
        var d;
        q.entries.forEach(function (b) {
            b.parallelEnabled === !1 && (d.parallel = !1), b.enclosingCollapsedFragment || a(b, d), b.type && !b.activation && (d = b)
        })
    }

    function l(a) {
        a.forEach(function (a) {
            var b = SEQ.entityCreateDestroy.createdParticipant(a);
            b ? q.createdParticipantNames[b] = !0 : (b = SEQ.entityMessage.createdParticipant(a), b && (q.createdParticipantNames[b] = !0))
        })
    }

    function m() {
        q.entries.forEach(function (a) {
            a.collisionTypeAreas && !a.enclosingCollapsedFragment && q.collisionTypeAreas.load(a.collisionTypeAreas())
        }), q.participants.forEach(function (a) {
            q.collisionTypeAreas.load(a.collisionTypeAreas())
        })
    }

    var n = {ongoing: !1}, o = new RegExp("^\\s*$"), p = new RegExp("^\\s*((:?#|//).*)$"), q = {}, r = {};
    return {parse: a, diagram: q, participantExists: i, parsingState: n, imageCache: r, regExpComment: p}
}();
var SEQ = SEQ || {};
SEQ.entityParticipant = function () {
    function a(a, b, d) {
        var e = v.exec(a);
        if (null != e && e.length > x.ALIAS) {
            var f = e[x.TYPE];
            f || (f = e[x.ICON_FONT_TYPE]);
            var g = e[x.ALIAS], h = e[x.LONG_NAME], i = e[x.COLOR_NAME], j = e[x.COLOR_HEX], k = i ? i : j,
                l = h && (0 === h.indexOf("http://") || 0 === h.indexOf("https://") || 0 === h.indexOf("file://")),
                m = {type: y.PARTICIPANT, fromParticipantName: g, longName: h, raw: a};
            if (l) {
                var n = SEQ.parser.imageCache[h];
                if (n) return n.inUse = !0, c(g, 0, 0, m, null, k, n.image), m;
                m.loadingImage = !0;
                var o = b + 1, p = new Image;
                return p.crossOrigin = "Anonymous", p.onerror = function () {
                    var a = SEQ.textUtil.parseTextData("Error loading image");
                    c(g, 0, 0, m, a, k), d(o)
                }, p.onload = function () {
                    SEQ.parser.imageCache[h] = {image: p, inUse: !0}, c(g, 0, 0, m, null, k, p), d(o)
                }, p.src = h, m
            }
            if (h) var q = SEQ.textUtil.parseTextData(h);
            if (f != y.PARTICIPANT) {
                var r;
                e[x.ICON_UNICODE] && (r = String.fromCodePoint(parseInt(e[x.ICON_UNICODE], 16))), c(g, 0, 0, m, q, k, null, SEQ.participantTypes[f], r)
            } else c(g, 0, 0, m, q, k);
            return m
        }
    }

    function b(a, b, c) {
        SEQ.parser.participantExists(a) || g(a);
        var d = SEQ.parser.diagram.participantsByName[a];
        d.timelineLeftWidth < b && (d.timelineLeftWidth = b), d.timelineRightWidth < c && (d.timelineRightWidth = c)
    }

    function c(a, b, c, d, e, f, i, j, k) {
        SEQ.parser.participantExists(a) || g(a, d, e, f, i, j, k);
        var l = SEQ.parser.diagram.participantsByName[a];
        return (b || c) && h(l, b, c), l
    }

    function d(a) {
        return w.LEFT_PARTICIPANT === a || w.RIGHT_PARTICIPANT === a
    }

    function e(a) {
        return w.LEFT_PARTICIPANT === a
    }

    function f(a) {
        return w.RIGHT_PARTICIPANT === a
    }

    function g(a, b, c, e, f, g, h) {
        var i, j;
        if (f) i = SEQ.metrics.data.participantImageHeight / f.height * f.width, j = SEQ.metrics.data.participantImageHeight; else if (g) {
            var k, l = g.width(h);
            c ? (k = c.width, j = g.height(h) + c.height) : (k = SEQ.metrics.calcWidth(a), j = g.height(h) + SEQ.metrics.data.textLineHeight + SEQ.metrics.data.textTopBottomPadding), i = l > k ? l : k
        } else c ? (i = c.width + 2 * SEQ.metrics.data.participantPadding + SEQ.metrics.data.participantTypeLineWeight, j = c.height + 2 * SEQ.metrics.data.participantTopBottomPadding + SEQ.metrics.data.participantBoxLineWeight) : (i = d(a) ? 0 : SEQ.metrics.calcWidth(a) + 2 * SEQ.metrics.data.participantPadding + SEQ.metrics.data.participantTypeLineWeight, j = SEQ.metrics.data.textLineHeight + SEQ.metrics.data.textTopBottomPadding + 2 * SEQ.metrics.data.participantTopBottomPadding + SEQ.metrics.data.participantTypeLineWeight);
        var m = {
            type: SEQ.entityParticipant.Type.PARTICIPANT,
            name: a,
            font: SEQ.main.getFontNormal(),
            width: i,
            height: j,
            entityLeftWidth: 0,
            entityRightWidth: 0,
            timelineLeftWidth: 0,
            timelineRightWidth: 0,
            outerLeftWidth: 0,
            outerRightWidth: 0,
            longNameTextData: c,
            image: f,
            participantType: g,
            iconUnicode: h,
            color: e,
            entry: b,
            createPositions: [],
            destroyPositions: [],
            collisionTypeAreas: q
        };
        !SEQ.parser.diagram.createdParticipantNames[a] && j > SEQ.parser.diagram.participantMaxHeight && (SEQ.parser.diagram.participantMaxHeight = j), SEQ.parser.diagram.participantsByName[a] = m, SEQ.parser.diagram.participants.push(m), SEQ.parser.diagram.ongoingParticipantGroups.forEach(function (a) {
            a.enclosedParticipants.push(m)
        })
    }

    function h(a, b, c) {
        a.entityLeftWidth < b && (a.entityLeftWidth = b), a.entityRightWidth < c && (a.entityRightWidth = c)
    }

    function i(a, b, c) {
        a.outerLeftWidth += b, a.outerRightWidth += c
    }

    function j(a, b, c) {
        SEQ.parser.participantExists(a) || g(a), SEQ.parser.participantExists(b) || g(b);
        var d, e = SEQ.parser.diagram.participantsByName[a], f = SEQ.parser.diagram.participantsByName[b],
            i = SEQ.parser.diagram.participants.indexOf(e), j = SEQ.parser.diagram.participants.indexOf(f),
            l = Math.abs(i - j);
        if (l > 2) {
            var m = k(i, j, SEQ.parser.diagram.participants), n = c - m;
            d = n / 2
        } else d = 2 === l ? c / 2 : c;
        d > 0 && (i < j ? (h(e, 0, d), h(f, d, 0)) : (h(e, d, 0), h(f, 0, d)))
    }

    function k(a, b) {
        for (var c = a < b ? {low: a, high: b} : {low: b, high: a}, d = 0, e = c.low + 1; e <= c.high; e++) {
            var f = SEQ.parser.diagram.participants[e - 1], g = SEQ.parser.diagram.participants[e];
            if (e != c.low + 1 && e != c.high) {
                var h = (f ? f.width / 2 + SEQ.metrics.data.participantMarginSide : 0) + g.width / 2 + SEQ.metrics.data.participantMarginSide,
                    i = f && f.entityRightWidth > g.entityLeftWidth ? f.entityRightWidth : g.entityLeftWidth;
                d += Math.max(h, i)
            }
        }
        return d
    }

    function l(a, b, c, d) {
        if (!a.createPositions.length) {
            var e = SEQ.metrics.data.participantMarginTop;
            c || (SEQ.parser.diagram.title && (e += SEQ.parser.diagram.title.totalHeight), SEQ.parser.diagram.frame && (e += SEQ.parser.diagram.frame.totalHeight), e += SEQ.parser.diagram.maxParticipantGroupHeight), m(a, b, e, d)
        }
    }

    function m(a, b, c, d) {
        if (a.image) {
            c += SEQ.parser.diagram.participantMaxHeight - SEQ.metrics.data.participantImageHeight;
            var e = a.posX - a.width / 2;
            b.beginPath(), b.save(), b.rect(e, c, a.width, a.height), b.fillStyle = "white", b.fill(), b.restore(), b.drawImage(a.image, e, c, a.width, a.height)
        } else a.participantType ? (a.participantType.paint(b, a, SEQ.parser.diagram.participantMaxHeight, c), n(a, b, SEQ.parser.diagram.participantMaxHeight, c, d)) : SEQ.entityParticipant.isSpecialParticipantName(a.name) || (o(a, b, SEQ.parser.diagram.participantMaxHeight, c), c -= SEQ.metrics.data.participantTopBottomPadding, n(a, b, SEQ.parser.diagram.participantMaxHeight, c, d))
    }

    function n(a, b, c, d, e) {
        if (b.save(), a.longNameTextData) SEQ.textUtil.fillTextParticipant(b, e, a.longNameTextData.parsedLines, a.posX, d + c - a.longNameTextData.height); else {
            var f = SEQ.metrics.calcWidth(a.name, a.font);
            b.font = a.font, b.fillText(a.name, a.posX - f / 2, d + c - SEQ.metrics.data.textTopBottomPadding)
        }
        b.restore()
    }

    function o(a, b, c, d) {
        var e = d + c - a.height + SEQ.metrics.data.participantTypeLineWeight, f = a.width;
        b.beginPath(), b.save(), b.rect(a.posX - f / 2, e, f, a.height - SEQ.metrics.data.participantTypeLineWeight), a.color ? b.fillStyle = a.color : b.fillStyle = "white", b.fill(), b.lineWidth = SEQ.metrics.data.participantBoxLineWeight, b.stroke(), b.restore()
    }

    function p(a, b, c) {
        for (var d = SEQ.parser.diagram.participants, e = 0; e < d.length; e++) {
            var f = d[e], g = [];
            SEQ.parser.diagram.entries.forEach(function (a) {
                a.activation && a.fromParticipantName === f.name && a.position.posY <= b && (a.endPosY >= b || !a.endPosY) && g.push(a)
            });
            var h, i = g.length ? SEQ.metrics.data.activationSideWidth : 0,
                j = g.length ? SEQ.entityActivation.calcActivationCenterDiff(g) + SEQ.metrics.data.activationSideWidth : 0;
            h = c ? SEQ.metrics.data.dragAndDropInteractionMargin : SEQ.entityParticipant.isSpecialParticipantName(f.name) ? SEQ.metrics.data.participantSpecialCollisionSpace : f.width / 2;
            var k = SEQ.parser.diagram.title ? SEQ.parser.diagram.title.totalHeight : 0,
                l = SEQ.parser.diagram.frame ? SEQ.parser.diagram.frame.totalHeight : 0,
                m = k + l + SEQ.metrics.data.participantMarginTop + SEQ.parser.diagram.participantMaxHeight + SEQ.parser.diagram.maxParticipantGroupHeight,
                n = f.posX - h - i, o = f.posX + h + j, p = m - f.height;
            if (a > n && a < o && (!b || b > p)) return f
        }
    }

    function q() {
        var a = SEQ.parser.diagram.title ? SEQ.parser.diagram.title.totalHeight : 0,
            b = SEQ.parser.diagram.frame ? SEQ.parser.diagram.frame.totalHeight : 0,
            c = a + b + SEQ.metrics.data.participantMarginTop + SEQ.parser.diagram.participantMaxHeight + SEQ.parser.diagram.maxParticipantGroupHeight,
            d = [];
        return d.push({
            minX: this.posX - this.width / 2,
            maxX: this.posX + this.width / 2,
            minY: c - this.height,
            maxY: c,
            type: "move"
        }), d
    }

    function r(a) {
        return y.PARTICIPANT === a
    }

    var s = "((?:[^\\*#<>\\(\\)\\-:\\,\\=\\s]+[^#<>\\,:]*[^\\*#<>\\(\\)\\-:\\,\\=\\s]+)|(?:[^\\*#<>\\(\\)\\-:\\,\\=\\s]+))",
        t = "(?:\\s?(#[a-fA-F0-9]{6})|(?:\\s?#)([a-zA-Z]{3,20}))", u = t + "?",
        v = new RegExp('^\\s*(?:(participant|actor|boundary|control|entity|database)|(fontawesome|materialdesignicons)\\s([a-fA-F0-9]{4}))\\s(?:(")(.+)(")\\s(as)\\s)?' + s + u),
        w = {LEFT_PARTICIPANT: "[", RIGHT_PARTICIPANT: "]"}, x = {
            TYPE: 1,
            ICON_FONT_TYPE: 2,
            ICON_UNICODE: 3,
            QUOTE_1: 4,
            LONG_NAME: 5,
            QUOTE_2: 6,
            AS: 7,
            ALIAS: 8,
            COLOR_HEX: 9,
            COLOR_NAME: 10
        }, y = {
            PARTICIPANT: "participant",
            ACTOR: "actor",
            BOUNDARY: "boundary",
            CONTROL: "control",
            ENTITY: "entity",
            DATABASE: "database",
            FONT_AWESOME: "fontawesome",
            MATERIAL_DESIGN_ICONS: "materialdesignicons"
        };
    return {
        parse: a,
        paint: l,
        paintParticipant: m,
        findParticipantXCollision: p,
        storeParticipantWithDefinedWidths: c,
        storeParticipantWithTimelineWidths: b,
        storeParticipantsAndCalcWidths: j,
        updateParticipantEntityWidths: h,
        updateParticipantOuterWidths: i,
        isType: r,
        isSpecialParticipantName: d,
        isSpecialParticipantLeftName: e,
        isSpecialParticipantRightName: f,
        Type: y,
        nameGroup: s,
        colorGroup: u,
        colorGroupMandatory: t,
        regExp: v,
        groups: x,
        specialParticipant: w
    }
}();
var SEQ = SEQ || {};
SEQ.entityDivider = function () {
    function a(a) {
        var f = h.exec(a);
        if (null != f && f.length > i.TEXT) {
            var g = SEQ.textUtil.parseTextData(f[i.TEXT]), k = f[i.COLOR_NAME], l = f[i.COLOR_HEX], m = k ? k : l;
            return {
                type: j.DIVIDER,
                textData: g,
                color: m,
                totalHeight: g.height + 2 * SEQ.metrics.data.textPadding,
                totalWidth: g.width + 2 * SEQ.metrics.data.textPadding + 2 * SEQ.metrics.data.dividerMinimumLineWidth + 2 * SEQ.metrics.data.entryMarginSide + 2 * SEQ.metrics.data.boxBleed,
                topMargin: SEQ.metrics.data.entityMarginTop,
                position: {},
                raw: a,
                paint: c,
                updatePos: b,
                collision: d,
                collisionTypeAreas: e
            }
        }
    }

    function b(a, b) {
        a.position.posY = b
    }

    function c(a, b, c, d) {
        function e() {
            return 1 === a.textData.lines.length && "" === a.textData.lines[0]
        }

        var f = SEQ.metrics.data.entryMarginSide, g = SEQ.main.getDiagramCanvas().width,
            h = g - SEQ.metrics.data.entryMarginSide, i = SEQ.metrics.data.dividerLineSpacing,
            j = a.position.posY - a.totalHeight / 2;
        if (b.beginPath(), b.moveTo(f, j - i), b.lineTo(h, j - i), b.moveTo(f, j), b.lineTo(h, j), b.moveTo(f, j + i), b.lineTo(h, j + i), b.stroke(), !e()) {
            var k = a.totalWidth - 2 * SEQ.metrics.data.dividerMinimumLineWidth - 2 * SEQ.metrics.data.entryMarginSide,
                l = a.position.posY - a.totalHeight, m = g / 2 - k / 2;
            b.beginPath(), b.moveTo(m, l), b.lineTo(m + k, l), b.lineTo(m + k, l + a.totalHeight), b.lineTo(m, l + a.totalHeight), b.closePath();
            var n = b.fillStyle;
            a.color ? b.fillStyle = a.color : b.fillStyle = "white", b.fill(), b.fillStyle = n, b.stroke();
            var o = g / 2 - a.textData.width / 2;
            SEQ.textUtil.fillText(b, c, a.textData.parsedLines, o, a.position.posY - a.totalHeight / 2 - a.textData.height / 2)
        }
    }

    function d(a) {
        return {
            main: {
                startX: 0,
                endX: Number.MAX_VALUE,
                startY: a.position.posY,
                endY: a.position.posY - a.totalHeight
            }
        }
    }

    function e() {
        var a = this.collision(this).main;
        return [{minX: a.startX, maxX: a.endX, minY: a.endY, maxY: a.startY, type: "move"}]
    }

    function f(a) {
        return j.DIVIDER + a.replace(/\n/g, "\\n") + j.DIVIDER
    }

    function g(a) {
        return j.DIVIDER === a
    }

    var h = new RegExp("^\\s*(==)(.*)(==)" + SEQ.entityParticipant.colorGroup),
        i = {EQUALS_1: 1, TEXT: 2, EQUALS_2: 3, COLOR_HEX: 4, COLOR_NAME: 5}, j = {DIVIDER: "=="};
    return {parse: a, paint: c, collision: d, build: f, isType: g, Type: j, groups: i, regExp: h}
}();
var SEQ = SEQ || {};
SEQ.entityTitle = function () {
    function a(a) {
        var b = d.exec(a);
        if (null != b && b.length > e.VALUE) return {
            type: f.TITLE,
            title: b[e.VALUE],
            totalHeight: SEQ.metrics.data.textLineHeight * SEQ.main.fontSizeTitleRatio + SEQ.metrics.data.baseSpaceMetric,
            topMargin: 0,
            position: {},
            font: SEQ.main.getFontTitle(),
            raw: a
        }
    }

    function b(a) {
        var b = SEQ.parser.diagram, c = SEQ.main.getDiagramContext();
        c.font = b.title.font, c.fillStyle = "black";
        var d = SEQ.metrics.calcWidth(b.title.title),
            e = b.title.topMargin + b.title.totalHeight - SEQ.metrics.data.baseSpaceMetric;
        b.frame && (e += b.frame.totalHeight), c.fillText(b.title.title, a.width / 2 - d / 2, e)
    }

    function c(a) {
        return a === f.TITLE
    }

    var d = new RegExp("^\\s*(title) (.+)", "i"), e = {TITLE: 1, VALUE: 2}, f = {TITLE: "title"};
    return {parse: a, paint: b, isType: c, Type: f, regExp: d, groups: e}
}();
var SEQ = SEQ || {};
SEQ.entityFontFamily = function () {
    function a(a) {
        var d = b.exec(a);
        if (null != d && d.length > c.NAME) {
            var e = d[c.NAME];
            return {raw: a, fontFamily: e}
        }
    }

    var b = new RegExp("^\\s*(fontfamily)\\s(.+)"), c = {FONT_FAMILY: 1, NAME: 2}, d = {FONT_FAMILY: "fontfamily"};
    return {parse: a, regExp: b, groups: c, Type: d}
}();
var SEQ = SEQ || {};
SEQ.entityMessage = function () {
    function a(a, c, l, m, p) {
        var r = w.exec(a);
        if (null != r && r.length > y.TEXT) {
            var s, t, u = r[y.TYPE];
            u.indexOf(">") > -1 ? (s = r[y.PARTICIPANT_1], t = r[y.PARTICIPANT_2]) : (s = r[y.PARTICIPANT_2], t = r[y.PARTICIPANT_1]);
            var v,
                x = h([r[y.COLOR_HEX_3], r[y.COLOR_NAME_4], r[y.COLOR_HEX_7], r[y.COLOR_NAME_8], r[y.COLOR_HEX_9], r[y.COLOR_NAME_10]]),
                z = l ? m : null, A = SEQ.textUtil.parseTextData(r[y.TEXT], z), B = A.height,
                C = r[y.DELAY_LEFT] ? r[y.DELAY_LEFT] : r[y.DELAY_RIGHT];
            C && (v = SEQ.metrics.data.baseSpaceMetric * parseInt(C.substring(1, C.length - 1)), B += v);
            var D;
            if (s === t) {
                D = A.width + SEQ.metrics.data.messageArrowWidth + SEQ.metrics.data.textPadding + SEQ.metrics.data.messageSelfRefSideMargin;
                var E = SEQ.metrics.data.messageSelfRefWidth, F = SEQ.metrics.data.messageSelfRefSideMargin;
                D = D > E + F ? D : E + F, B += SEQ.metrics.data.messageSelfRefHeight
            } else D = A.width + 2 * SEQ.metrics.data.messageArrowWidth + 2 * SEQ.metrics.data.textPadding;
            if (p) var G = i(u, s, t);
            var H = {};
            if (u.indexOf("*") > -1) {
                var I = SEQ.parser.diagram.participantsByName[t];
                I || (SEQ.entityParticipant.storeParticipantWithDefinedWidths(t, 0, 0), I = SEQ.parser.diagram.participantsByName[t]);
                var J = I.height / 2, K = B - J;
                B = I.height, K > 0 && (B += K), I.createPositions.push(H), D += I.width / 2
            }
            var L = SEQ.parser.diagram.ongoingFragments;
            if (L.length) var M = L[L.length - 1], N = M.backgroundColor;
            return {
                type: u,
                fromParticipantName: s,
                toParticipantName: t,
                participantToCreate: I,
                textData: A,
                color: x,
                enclosingFragmentColor: N,
                totalHeight: B,
                delayHeight: v,
                totalWidth: D,
                topMargin: SEQ.metrics.data.entityMarginTop,
                position: H,
                autoNumber: z,
                parallel: c,
                linearWithPrevious: G,
                linearEnabled: p,
                raw: a,
                message: !0,
                paint: k,
                updatePos: d,
                reCalcTotalHeight: b,
                collision: n,
                collisionTypeAreas: o,
                buildRaw: q,
                calcPosX: j,
                updateActivationPosDiff: g,
                updateEnclosingFragments: f,
                updateParticipantWidths: e
            }
        }
    }

    function b() {
        if (this.delayHeight && this.fromParticipantName != this.toParticipantName) {
            var a = c(this).availableHeight, b = this.textData.height - a;
            b < 0 ? this.totalHeight -= this.textData.height : this.totalHeight -= a
        }
    }

    function c(a) {
        var b;
        if (a.fromParticipantName === a.toParticipantName) b = SEQ.metrics.data.messageSelfRefWidth; else {
            var c = j(a);
            b = Math.abs(c.toX - c.fromX)
        }
        var d = Math.atan2(a.delayHeight, b), e = (b - a.textData.width) / 2, f = e * Math.tan(d);
        return {angle: d, availableHeight: f}
    }

    function d(a, b, c, d) {
        a.position.posY = b, a.fromPosX = c, a.toPosX = d
    }

    function e(a) {
        if (a.fromParticipantName === a.toParticipantName) SEQ.entityParticipant.storeParticipantWithDefinedWidths(a.fromParticipantName, 0, a.totalWidth); else {
            var b = SEQ.parser.diagram.participants.indexOf(SEQ.parser.diagram.participantsByName[a.fromParticipantName]),
                c = SEQ.parser.diagram.participants.indexOf(SEQ.parser.diagram.participantsByName[a.toParticipantName]);
            b < c ? SEQ.entityParticipant.storeParticipantsAndCalcWidths(a.fromParticipantName, a.toParticipantName, a.totalWidth) : SEQ.entityParticipant.storeParticipantsAndCalcWidths(a.fromParticipantName, a.toParticipantName, a.totalWidth)
        }
    }

    function f(a) {
        if (a.fromParticipantName === a.toParticipantName) SEQ.entityFragment.storeEnclosedEntriesData(a.fromParticipantName, 0, a.totalWidth, 0, a.fromActivationXDiff, a.snapshot.ongoingFragments); else {
            var b = SEQ.parser.diagram.participants.indexOf(SEQ.parser.diagram.participantsByName[a.fromParticipantName]),
                c = SEQ.parser.diagram.participants.indexOf(SEQ.parser.diagram.participantsByName[a.toParticipantName]),
                d = 0;
            a.participantToCreate && (d = a.participantToCreate.width / 2 + SEQ.metrics.data.entryMarginSide), b < c ? (SEQ.entityFragment.storeEnclosedEntriesData(a.fromParticipantName, 0, 0, 0, 0, a.snapshot.ongoingFragments), SEQ.entityFragment.storeEnclosedEntriesData(a.toParticipantName, d, d, 0, a.toActivationXDiff, a.snapshot.ongoingFragments)) : (SEQ.entityFragment.storeEnclosedEntriesData(a.fromParticipantName, 0, 0, 0, 0, a.snapshot.ongoingFragments), SEQ.entityFragment.storeEnclosedEntriesData(a.toParticipantName, d, d, a.toActivationXDiff, 0, a.snapshot.ongoingFragments))
        }
    }

    function g(a, b) {
        var c;
        c = b ? b.snapshot.ongoingActivations : a.snapshot.ongoingActivations;
        var d = SEQ.parser.diagram.participants.indexOf(SEQ.parser.diagram.participantsByName[a.fromParticipantName]),
            e = SEQ.parser.diagram.participants.indexOf(SEQ.parser.diagram.participantsByName[a.toParticipantName]),
            f = 0, g = 0, h = c[a.fromParticipantName] || [], i = c[a.toParticipantName] || [];
        a.fromParticipantName === a.toParticipantName ? (h.length && (f += SEQ.entityActivation.calcActivationCenterDiff(h) + SEQ.metrics.data.activationSideWidth, g += SEQ.entityActivation.calcActivationCenterDiff(i) + SEQ.metrics.data.activationSideWidth), "undefined" == typeof a.fromActivationXDiffOriginal && (a.fromActivationXDiffOriginal = a.fromActivationXDiff)) : d < e ? (h.length && (f += SEQ.entityActivation.calcActivationCenterDiff(h) + SEQ.metrics.data.activationSideWidth), i.length && (g += SEQ.entityActivation.calcActivationCenterDiff(i) - SEQ.metrics.data.activationSideWidth)) : (h.length && (f += SEQ.entityActivation.calcActivationCenterDiff(h) - SEQ.metrics.data.activationSideWidth), i.length && (g += SEQ.entityActivation.calcActivationCenterDiff(i) + SEQ.metrics.data.activationSideWidth)), b ? (b.fromParticipantName === a.fromParticipantName && (a.fromActivationXDiff = f), b.fromParticipantName === a.toParticipantName && (a.toActivationXDiff = g)) : (a.fromActivationXDiff = f, a.toActivationXDiff = g)
    }

    function h(a) {
        for (var b = 0; b < a.length; b++) {
            var c = a[b];
            if (c) return c
        }
    }

    function i(a, b, c) {
        var d, e, f = SEQ.parser.diagram;
        if (f.entries.length > 0) for (var g = f.entries.length - 1; g >= 0; g--) {
            var h = f.entries[g];
            if (h && h.type) {
                d = h, e = d.type.trim().replace(x, "");
                break
            }
        }
        var i = a.trim().replace(x, "");
        if (d && d.linearEnabled && v.exec(e) && e === i && d.toParticipantName === b) {
            var j = f.participantsByName, k = f.participants, l = j[d.fromParticipantName], m = j[d.toParticipantName],
                n = j[b], o = j[c], p = k.indexOf(l), q = k.indexOf(m), r = k.indexOf(n), s = k.indexOf(o);
            if (p < q && (r <= s || !o) || p > q && r >= s) return !0
        }
        return !1
    }

    function j(a) {
        var b = SEQ.parser.diagram.participantsByName[a.fromParticipantName].posX,
            c = SEQ.parser.diagram.participantsByName[a.toParticipantName].posX;
        return b += a.fromParticipantName === a.toParticipantName ? "undefined" == typeof a.fromActivationXDiffOriginal ? a.fromActivationXDiff : a.fromActivationXDiffOriginal : a.fromActivationXDiff, a.participantToCreate ? c > b ? c -= a.participantToCreate.width / 2 : c += a.participantToCreate.width / 2 : c += a.toActivationXDiff, {
            fromX: b,
            toX: c
        }
    }

    function k(a, b, d, e) {
        var f, g;
        if (e) f = a.fromPosX, g = a.toPosX; else {
            var h = j(a);
            f = h.fromX, g = h.toX
        }
        var i, k, m, n, o = f > g ? g : f,
            p = a.fromParticipantName === a.toParticipantName && Math.abs(f - g) < SEQ.metrics.data.messageCreatorInteractionMargin + a.fromActivationXDiff;
        if (p) {
            if (i = g + SEQ.metrics.data.messageArrowWidth + SEQ.metrics.data.textPadding, k = a.position.posY - a.totalHeight, m = a.position.posY, a.delayHeight) {
                var q = c(a);
                n = q.angle
            }
        } else {
            var r = Math.abs(f - g);
            if (a.participantToCreate) {
                m = a.position.posY - a.participantToCreate.height / 2, k = a.delayHeight ? a.position.posY - a.totalHeight + SEQ.metrics.data.participantBoxLineWeight / 2 : m - a.textData.height;
                var s = m - SEQ.parser.diagram.participantMaxHeight + a.participantToCreate.height / 2 - SEQ.metrics.data.participantTypeLineWeight / 2;
                SEQ.entityParticipant.paintParticipant(a.participantToCreate, b, s)
            } else k = a.position.posY - a.totalHeight, m = a.position.posY;
            if (a.delayHeight) {
                var t = c(a);
                n = t.angle, t.availableHeight > a.textData.height && (k += t.availableHeight - a.textData.height)
            }
            i = o + r / 2 - a.textData.width / 2
        }
        var u = "white";
        SEQ.parser.diagram.participantGroups.length ? u = !!a.enclosingFragmentColor && (a.enclosingFragmentColor ? a.enclosingFragmentColor : "white") : a.enclosingFragmentColor ? u = a.enclosingFragmentColor ? a.enclosingFragmentColor : "white" : SEQ.parser.diagram.frame && SEQ.parser.diagram.frame.backgroundColor && (u = SEQ.parser.diagram.frame.backgroundColor), SEQ.textUtil.fillText(b, d, a.textData.parsedLines, i, k, a.autoNumber, a.textData.autoNumberWidth, u), SEQ.parser.diagram.frame && (SEQ.entityParticipant.isSpecialParticipantLeftName(a.fromParticipantName) && (f -= SEQ.metrics.data.frameMargin), SEQ.entityParticipant.isSpecialParticipantLeftName(a.toParticipantName) && (g -= SEQ.metrics.data.frameMargin), SEQ.entityParticipant.isSpecialParticipantRightName(a.toParticipantName) && (g += SEQ.metrics.data.frameMargin), SEQ.entityParticipant.isSpecialParticipantRightName(a.fromParticipantName) && (f += SEQ.metrics.data.frameMargin)), d ? l(b, a.type, m, f, g, p, a.delayHeight, n) : l(b, a.type, m, f, g, p, a.delayHeight, n, a.color)
    }

    function l(a, b, c, d, e, f, g, h, i) {
        a.save(), i && (a.strokeStyle = i, a.fillStyle = i), a.beginPath(), b.indexOf("--") > -1 && void 0 !== a.setLineDash && a.setLineDash([SEQ.metrics.data.messageLineDashWidth]);
        var j = d < e && !f;
        if (f) {
            var k = SEQ.metrics.data.messageSelfRefHeight, l = SEQ.metrics.data.messageSelfRefWidth + Math.abs(d - e),
                n = c - k, o = 0;
            g && h && (o = g), a.moveTo(d, n - o), a.lineTo(d + l, n - o), a.lineTo(d + l, c - o);
            var p = c;
            g && h && (p -= .2 * SEQ.metrics.data.messageArrowWidth * Math.tan(h)), a.lineTo(e + .2 * SEQ.metrics.data.messageArrowWidth, p), a.stroke()
        } else {
            var q = c;
            g && h ? (a.moveTo(d, c - g), q -= .2 * SEQ.metrics.data.messageArrowWidth * Math.tan(h)) : a.moveTo(d, c), j ? a.lineTo(e - .2 * SEQ.metrics.data.messageArrowWidth, q) : a.lineTo(e + .2 * SEQ.metrics.data.messageArrowWidth, q), a.stroke()
        }
        var r = b.indexOf(">>") > -1 || b.indexOf("<<") > -1;
        m(c, j, e, a, r, h), b.indexOf(">") > -1 && b.indexOf("<") > -1 && m(c, e < d, d, a, r), a.restore()
    }

    function m(a, b, c, d, e, f) {
        d.setLineDash([]);
        var g, h, i = SEQ.metrics.data.messageArrowWidth;
        b ? (g = -i, h = -SEQ.metrics.data.diagramLineWeight) : (g = i, h = SEQ.metrics.data.diagramLineWeight);
        var j = c;
        e && (c += h, g -= h), d.translate(j, a), f && (b || (f = -f), d.rotate(f)), d.translate(-j, -a), d.beginPath(), d.moveTo(c + g, a - i / 2), d.lineTo(c, a), d.lineTo(c + g, a + i / 2), e ? d.stroke() : (d.closePath(), d.fill()), f && d.rotate(-f)
    }

    function n(a) {
        var b, c, d, e, f = j(a), g = f.fromX, h = f.toX;
        if (a.participantToCreate) {
            var i, k;
            return g < h ? (i = h, k = h + a.participantToCreate.width, h += a.participantToCreate.width, g += SEQ.metrics.data.messageInteractionMargin) : (i = h - a.participantToCreate.width, k = h, h -= a.participantToCreate.width, g -= SEQ.metrics.data.messageInteractionMargin), g < h ? (b = g, c = h) : (b = h, c = g), d = a.position.posY, e = a.position.posY - a.totalHeight, {
                main: {
                    startX: b,
                    endX: c,
                    startY: d,
                    endY: e
                }, participantToCreate: {startX: i, endX: k, startY: d, endY: e}
            }
        }
        return a.fromParticipantName === a.toParticipantName ? (b = g, c = h + a.totalWidth - SEQ.metrics.data.messageSelfRefSideMargin) : g < h ? (b = g, c = h) : (b = h, c = g), b += SEQ.metrics.data.messageInteractionMargin, c -= SEQ.metrics.data.messageInteractionMargin, d = a.position.posY + SEQ.metrics.data.collisionBleed, e = a.position.posY - a.totalHeight, {
            main: {
                startX: b,
                endX: c,
                startY: d,
                endY: e
            }
        }
    }

    function o() {
        var a = this.collision(this).main, b = [];
        if (this.collision(this).participantToCreate) {
            var c = j(this);
            c.fromX < c.toX ? b.push({
                minX: a.startX,
                maxX: a.startX + SEQ.metrics.data.entryMoverXCollisionWidth - SEQ.metrics.data.messageInteractionMargin,
                minY: a.endY,
                maxY: a.startY,
                type: "ew-resize"
            }, {
                minX: a.startX + SEQ.metrics.data.entryMoverXCollisionWidth - SEQ.metrics.data.messageInteractionMargin,
                maxX: a.endX,
                minY: a.endY,
                maxY: a.startY,
                type: "move"
            }) : b.push({
                minX: a.endX - SEQ.metrics.data.entryMoverXCollisionWidth + SEQ.metrics.data.messageInteractionMargin,
                maxX: a.endX,
                minY: a.endY,
                maxY: a.startY,
                type: "ew-resize"
            }, {
                minX: a.startX,
                maxX: a.endX - SEQ.metrics.data.entryMoverXCollisionWidth + SEQ.metrics.data.messageInteractionMargin,
                minY: a.endY,
                maxY: a.startY,
                type: "move"
            })
        } else b.push({
            minX: a.startX,
            maxX: a.startX + SEQ.metrics.data.entryMoverXCollisionWidth - SEQ.metrics.data.messageInteractionMargin,
            minY: a.endY,
            maxY: a.startY,
            type: "ew-resize"
        }, {
            minX: a.endX - SEQ.metrics.data.entryMoverXCollisionWidth + SEQ.metrics.data.messageInteractionMargin,
            maxX: a.endX,
            minY: a.endY,
            maxY: a.startY,
            type: "ew-resize"
        }, {
            minX: a.startX + SEQ.metrics.data.entryMoverXCollisionWidth - SEQ.metrics.data.messageInteractionMargin,
            maxX: a.endX - SEQ.metrics.data.entryMoverXCollisionWidth + SEQ.metrics.data.messageInteractionMargin,
            minY: a.endY,
            maxY: a.startY,
            type: "move"
        });
        return b
    }

    function p(a, b, c, d) {
        return />/.exec(a) ? b + a + c + ":" + d.replace(/\n/g, "\\n") : c + a + b + ":" + d.replace(/\n/g, "\\n")
    }

    function q(a) {
        return />/.exec(a.type) ? a.fromParticipantName + a.type + a.toParticipantName + ":" + SEQ.textUtil.buildSourceText(a.textData) : a.toParticipantName + a.type + a.fromParticipantName + ":" + SEQ.textUtil.buildSourceText(a.textData)
    }

    function r(a) {
        return null != v.exec(a)
    }

    function s(a) {
        var b = w.exec(a);
        if (null != b && b.length > y.TYPE && b[y.TYPE].indexOf("*") > -1) return b[y.TYPE].indexOf(">") > -1 ? b[y.PARTICIPANT_2] : b[y.PARTICIPANT_1]
    }

    var t = "(\\([0-9]+\\))?",
        u = "(\\s*--?" + SEQ.entityParticipant.colorGroup + ">?>" + t + "\\s*\\*?\\s*|\\s*\\*?\\s*" + t + "<<?" + SEQ.entityParticipant.colorGroup + "-?-\\s*|\\s*<<?-?-" + SEQ.entityParticipant.colorGroup + ">?>\\s*)",
        v = new RegExp(u),
        w = new RegExp("^\\s*" + SEQ.entityParticipant.nameGroup + u + SEQ.entityParticipant.nameGroup + "\\s?:\\s?(.*)"),
        x = new RegExp(SEQ.entityParticipant.colorGroupMandatory), y = {
            PARTICIPANT_1: 1,
            TYPE: 2,
            COLOR_HEX_3: 3,
            COLOR_NAME_4: 4,
            DELAY_RIGHT: 5,
            DELAY_LEFT: 6,
            COLOR_HEX_7: 7,
            COLOR_NAME_8: 8,
            COLOR_HEX_9: 9,
            COLOR_NAME_10: 10,
            PARTICIPANT_2: 11,
            TEXT: 12
        }, z = {
            REQ_FORWARD_SYNC: "->",
            RESP_FORWARD_SYNC: "-->",
            REQ_FORWARD_ASYNC: "->>",
            RESP_FORWARD_ASYNC: "-->>",
            REQ_BACKWARD_SYNC: "<-",
            RESP_BACKWARD_SYNC: "<--",
            REQ_BACKWARD_ASYNC: "<<-",
            RESP_BACKWARD_ASYNC: "<<--"
        };
    return {
        parse: a,
        paint: k,
        collision: n,
        build: p,
        paintArrowHead: m,
        isType: r,
        createdParticipant: s,
        Type: z,
        regExpArrow: v,
        regExp: w,
        groups: y
    }
}();
var SEQ = SEQ || {};
SEQ.entityNoteBoxLeftRight = function () {
    function a(a, j) {
        var l = m.exec(a);
        if (null != l && l.length > n.TEXT) {
            var o = SEQ.textUtil.parseTextData(l[n.TEXT]), p = l[n.TYPE], q = l[n.PARTICIPANT_FROM],
                r = l[n.COLOR_NAME], s = l[n.COLOR_HEX], t = r ? r : s,
                u = o.width + 2 * SEQ.metrics.data.textPadding + 2 * SEQ.metrics.data.boxBleed + 2 * SEQ.metrics.data.entryMarginSide,
                v = l[n.SIDE];
            return {
                type: p,
                fromParticipantName: q,
                side: v,
                textData: o,
                color: t,
                parallel: j,
                totalHeight: o.height + 2 * SEQ.metrics.data.textPadding,
                totalWidth: u,
                topMargin: SEQ.metrics.data.entityMarginTop,
                position: {},
                raw: a,
                paint: g,
                updatePos: b,
                collision: h,
                collisionTypeAreas: i,
                buildRaw: k,
                calcPosX: f,
                updateActivationPosDiff: e,
                updateEnclosingFragments: d,
                updateParticipantWidths: c
            }
        }
    }

    function b(a, b, c) {
        a.position.posY = b, a.fromPosX = c
    }

    function c(a) {
        p.LEFT === a.side ? SEQ.entityParticipant.storeParticipantWithDefinedWidths(a.fromParticipantName, a.totalWidth, 0) : SEQ.entityParticipant.storeParticipantWithDefinedWidths(a.fromParticipantName, 0, a.totalWidth)
    }

    function d(a) {
        p.LEFT === a.side ? SEQ.entityFragment.storeEnclosedEntriesData(a.fromParticipantName, a.totalWidth, 0, Math.abs(a.fromActivationXDiff), 0, a.snapshot.ongoingFragments) : SEQ.entityFragment.storeEnclosedEntriesData(a.fromParticipantName, 0, a.totalWidth, 0, a.fromActivationXDiff, a.snapshot.ongoingFragments)
    }

    function e(a) {
        var b = a.snapshot.ongoingActivations, c = 0, d = b[a.fromParticipantName] || [];
        a.side === SEQ.entityNoteBoxLeftRight.NotePosition.LEFT && d.length ? c -= SEQ.metrics.data.activationSideWidth : a.side === SEQ.entityNoteBoxLeftRight.NotePosition.RIGHT && d.length && (c += SEQ.entityActivation.calcActivationCenterDiff(d) + SEQ.metrics.data.activationSideWidth), a.fromActivationXDiff = c
    }

    function f(a) {
        var b = SEQ.parser.diagram.participantsByName[a.fromParticipantName].posX;
        return a.fromActivationXDiff && (b += a.fromActivationXDiff), {fromX: b}
    }

    function g(a, b, c, d) {
        var e;
        if (d) e = a.fromPosX; else {
            var g = f(a);
            e = g.fromX
        }
        b.beginPath();
        var h, i = SEQ.metrics.data.entryMarginSide;
        a.side === SEQ.entityNoteBoxLeftRight.NotePosition.LEFT ? (h = e - a.totalWidth + i, b.moveTo(e, a.position.posY - a.totalHeight / 2), b.lineTo(e - i, a.position.posY - a.totalHeight / 2)) : a.side === SEQ.entityNoteBoxLeftRight.NotePosition.RIGHT && (h = e + i, b.moveTo(e, a.position.posY - a.totalHeight / 2), b.lineTo(e + i, a.position.posY - a.totalHeight / 2)), SEQ.entityNoteBoxOver.paintNoteOrBox(a, b, h, a.totalWidth - 2 * i);
        var j = h - i + a.totalWidth / 2 - a.textData.width / 2,
            k = a.position.posY - a.totalHeight / 2 - a.textData.height / 2;
        SEQ.textUtil.fillText(b, c, a.textData.parsedLines, j, k)
    }

    function h(a) {
        var b, c, d = f(a), e = d.fromX, g = SEQ.metrics.data.entryMarginSide;
        return a.side === SEQ.entityNoteBoxLeftRight.NotePosition.LEFT ? (b = e - a.totalWidth, c = e) : a.side === SEQ.entityNoteBoxLeftRight.NotePosition.RIGHT && (b = e, c = e + a.totalWidth), b += g, c -= g, {
            main: {
                startX: b,
                endX: c,
                startY: a.position.posY,
                endY: a.position.posY - a.totalHeight
            }
        }
    }

    function i() {
        var a = this.collision(this).main, b = [];
        return b.push({minX: a.startX, maxX: a.endX, minY: a.endY, maxY: a.startY, type: "move"}), b
    }

    function j(a, b, c, d) {
        return a + " " + b + " " + c + ":" + d.replace(/\n/g, "\\n")
    }

    function k(a) {
        var b = "";
        return a.color && (b = a.color.indexOf("#") > -1 ? " " + a.color : " #" + a.color), a.type + " " + a.side + " " + a.fromParticipantName + b + ":" + SEQ.textUtil.buildSourceText(a.textData)
    }

    function l(a) {
        return o.NOTE === a || o.BOX === a || o.ABOX === a || o.RBOX === a || SEQ.entityNoteBoxOver.Type.REF === a
    }

    var m = new RegExp("^\\s*(note|box|rbox|abox)\\s(left\\sof|right\\sof)\\s" + SEQ.entityParticipant.nameGroup + "\\s?" + SEQ.entityParticipant.colorGroup + "\\s?:\\s?(.*)"),
        n = {TYPE: 1, SIDE: 2, PARTICIPANT_FROM: 3, COLOR_HEX: 4, COLOR_NAME: 5, TEXT: 6},
        o = {NOTE: "note", BOX: "box", RBOX: "rbox", ABOX: "abox"}, p = {LEFT: "left of", RIGHT: "right of"};
    return {parse: a, paint: g, collision: h, build: j, regExp: m, Type: o, isType: l, NotePosition: p, groups: n}
}();
var SEQ = SEQ || {};
SEQ.entityNoteBoxOver = function () {
    function a(a, g) {
        var h = p.exec(a);
        if (null != h && h.length > q.TEXT) {
            var i, j = SEQ.textUtil.parseTextData(h[q.TEXT]), k = h[q.TYPE], n = h[q.PARTICIPANT_TO],
                t = h[q.PARTICIPANT_FROM], u = h[q.COLOR_NAME], v = h[q.COLOR_HEX], w = u ? u : v;
            i = n ? j.width + 2 * SEQ.metrics.data.textPadding : j.width + 2 * SEQ.metrics.data.textPadding + 2 * SEQ.metrics.data.boxBleed + 2 * SEQ.metrics.data.entryMarginSide;
            var x = j.height + 2 * SEQ.metrics.data.textPadding;
            return r.REF === k && (x += SEQ.metrics.data.fragmentHeight), {
                type: k,
                notePosition: s.OVER,
                fromParticipantName: t,
                toParticipantName: n,
                side: h[q.SIDE],
                textData: j,
                color: w,
                parallel: g,
                totalHeight: x,
                totalWidth: i,
                topMargin: SEQ.metrics.data.entityMarginTop,
                position: {},
                raw: a,
                paint: f,
                updatePos: b,
                collision: l,
                collisionTypeAreas: m,
                buildRaw: o,
                calcPosX: e,
                updateEnclosingFragments: d,
                updateParticipantWidths: c
            }
        }
    }

    function b(a, b, c, d) {
        a.position.posY = b, a.fromPosX = c, a.toPosX = d
    }

    function c(a) {
        if (a.toParticipantName) SEQ.entityParticipant.storeParticipantsAndCalcWidths(a.fromParticipantName, a.toParticipantName, a.totalWidth); else {
            var b = a.totalWidth / 2;
            SEQ.entityParticipant.storeParticipantWithDefinedWidths(a.fromParticipantName, b, b)
        }
    }

    function d(a) {
        if (a.toParticipantName) SEQ.entityFragment.storeEnclosedEntriesData(a.fromParticipantName, 0, 0, 0, 0, a.snapshot.ongoingFragments), SEQ.entityFragment.storeEnclosedEntriesData(a.toParticipantName, 0, 0, 0, 0, a.snapshot.ongoingFragments); else {
            var b = a.totalWidth / 2;
            SEQ.entityFragment.storeEnclosedEntriesData(a.fromParticipantName, b, b, 0, 0, a.snapshot.ongoingFragments)
        }
    }

    function e(a) {
        var b = SEQ.parser.diagram.participantsByName[a.fromParticipantName].posX, c = null;
        return a.toParticipantName && (c = SEQ.parser.diagram.participantsByName[a.toParticipantName].posX), {
            fromX: b,
            toX: c
        }
    }

    function f(a, b, c, d) {
        var f, h;
        if (d) f = a.fromPosX, a.toParticipantName && (h = a.toPosX); else {
            var i = e(a);
            f = i.fromX, h = i.toX
        }
        b.beginPath();
        var j, k, l, m, n = SEQ.metrics.data.boxBleed;
        if (h) {
            var o = h > f ? f : h;
            j = o - n, m = Math.abs(f - h) + 2 * n, k = j + m / 2 - a.textData.width / 2, l = a.position.posY - a.totalHeight / 2 - a.textData.height / 2
        } else j = f - a.totalWidth / 2 + SEQ.metrics.data.entryMarginSide, m = a.totalWidth - 2 * SEQ.metrics.data.entryMarginSide, k = f - a.textData.width / 2, l = a.position.posY - a.totalHeight / 2 - a.textData.height / 2;
        r.REF === a.type ? (b.save(), b.lineWidth = SEQ.metrics.data.fragmentLineWeight, b.font = "bold " + SEQ.main.getFontSmall(), SEQ.entityFragment.paintFragment(b, b.font, j, a.position.posY - a.totalHeight, SEQ.metrics.data.fragmentHeight, a.position.posY, j + m, a.type, a.color, null, !0), b.restore(), l += SEQ.metrics.data.fragmentHeight / 2 - SEQ.metrics.data.fragmentLineWeight / 2) : g(a, b, j, m), SEQ.textUtil.fillText(b, c, a.textData.parsedLines, k, l)
    }

    function g(a, b, c, d) {
        r.NOTE == a.type ? h(b, c, a.position.posY, a.totalHeight, d, a.color) : r.BOX == a.type ? i(b, c, a.position.posY, a.totalHeight, d, a.color) : r.RBOX == a.type ? j(b, c, a.position.posY, a.totalHeight, d, a.color) : r.ABOX == a.type && k(b, c, a.position.posY, a.totalHeight, d, a.color)
    }

    function h(a, b, c, d, e, f) {
        var g = SEQ.metrics.data.boxBleed;
        a.moveTo(b, c - d), a.lineTo(b + e - g, c - d), a.lineTo(b + e, c - d + g), a.lineTo(b + e, c), a.lineTo(b, c), a.lineTo(b, c - d);
        var h = a.fillStyle;
        f ? a.fillStyle = f : a.fillStyle = "white", a.fill(), a.moveTo(b + e - g, c - d), a.lineTo(b + e - g, c - d + g), a.lineTo(b + e, c - d + g), a.fillStyle = h, a.stroke()
    }

    function i(a, b, c, d, e, f) {
        a.moveTo(b, c - d), a.lineTo(b + e, c - d), a.lineTo(b + e, c), a.lineTo(b, c), a.lineTo(b, c - d);
        var g = a.fillStyle;
        f ? a.fillStyle = f : a.fillStyle = "white", a.fill(), a.fillStyle = g, a.stroke()
    }

    function j(a, b, c, d, e, f) {
        var g = SEQ.metrics.data.boxBleed;
        a.moveTo(b, c - d + g), a.arc(b + g, c - d + g, g, Math.PI, -Math.PI / 2), a.lineTo(b + e - g, c - d), a.arc(b + e - g, c - d + g, g, -Math.PI / 2, 0), a.lineTo(b + e, c - g), a.arc(b + e - g, c - g, g, 0, Math.PI / 2), a.lineTo(b + g, c), a.arc(b + g, c - g, g, Math.PI / 2, Math.PI), a.lineTo(b, c - d + g);
        var h = a.fillStyle;
        f ? a.fillStyle = f : a.fillStyle = "white", a.fill(), a.fillStyle = h, a.stroke()
    }

    function k(a, b, c, d, e, f) {
        var g = SEQ.metrics.data.boxBleed;
        a.moveTo(b + g, c - d), a.lineTo(b + e - g, c - d), a.lineTo(b + e, c - d / 2), a.lineTo(b + e - g, c), a.lineTo(b + g, c), a.lineTo(b, c - d / 2), a.lineTo(b + g, c - d);
        var h = a.fillStyle;
        f ? a.fillStyle = f : a.fillStyle = "white", a.fill(), a.fillStyle = h, a.stroke()
    }

    function l(a) {
        var b, c, d = e(a), f = d.fromX, g = d.toX;
        return g ? (f < g ? (b = f, c = g) : (b = g, c = f), b -= SEQ.metrics.data.boxBleed, c += SEQ.metrics.data.boxBleed) : (b = f - a.totalWidth / 2 + SEQ.metrics.data.entryMarginSide, c = f + a.totalWidth / 2 - SEQ.metrics.data.entryMarginSide), {
            main: {
                startX: b,
                endX: c,
                startY: a.position.posY,
                endY: a.position.posY - a.totalHeight
            }
        }
    }

    function m() {
        var a = this.collision(this).main, b = [];
        return this.toParticipantName ? b.push({
            minX: a.startX,
            maxX: a.startX + SEQ.metrics.data.entryMoverXCollisionWidth + SEQ.metrics.data.boxBleed,
            minY: a.endY,
            maxY: a.startY,
            type: "ew-resize"
        }, {
            minX: a.endX - SEQ.metrics.data.entryMoverXCollisionWidth - SEQ.metrics.data.boxBleed,
            maxX: a.endX,
            minY: a.endY,
            maxY: a.startY,
            type: "ew-resize"
        }, {
            minX: a.startX + SEQ.metrics.data.entryMoverXCollisionWidth + SEQ.metrics.data.boxBleed,
            maxX: a.endX - SEQ.metrics.data.entryMoverXCollisionWidth - SEQ.metrics.data.boxBleed,
            minY: a.endY,
            maxY: a.startY,
            type: "move"
        }) : b.push({
            minX: a.startX,
            maxX: a.startX + SEQ.metrics.data.entryMoverXCollisionWidth,
            minY: a.endY,
            maxY: a.startY,
            type: "ew-resize"
        }, {
            minX: a.endX - SEQ.metrics.data.entryMoverXCollisionWidth,
            maxX: a.endX,
            minY: a.endY,
            maxY: a.startY,
            type: "ew-resize"
        }, {
            minX: a.startX + SEQ.metrics.data.entryMoverXCollisionWidth,
            maxX: a.endX - SEQ.metrics.data.entryMoverXCollisionWidth,
            minY: a.endY,
            maxY: a.startY,
            type: "move"
        }), b
    }

    function n(a, b, c) {
        return a + " " + s.OVER + " " + b + ":" + c.replace(/\n/g, "\\n")
    }

    function o(a) {
        var b = "";
        a.color && (b = a.color.indexOf("#") > -1 ? " " + a.color : " #" + a.color);
        var c = a.toParticipantName ? "," + a.toParticipantName : "";
        return a.type + " " + a.side + " " + a.fromParticipantName + c + b + ":" + SEQ.textUtil.buildSourceText(a.textData)
    }

    var p = new RegExp("^\\s*(note|box|rbox|abox|ref)\\s(over)\\s" + SEQ.entityParticipant.nameGroup + ",?\\s?" + SEQ.entityParticipant.nameGroup + "?\\s?" + SEQ.entityParticipant.colorGroup + "\\s?:\\s?(.*)"),
        q = {TYPE: 1, SIDE: 2, PARTICIPANT_FROM: 3, PARTICIPANT_TO: 4, COLOR_HEX: 5, COLOR_NAME: 6, TEXT: 7},
        r = {NOTE: "note", BOX: "box", RBOX: "rbox", ABOX: "abox", REF: "ref"}, s = {OVER: "over"};
    return {
        parse: a,
        paint: f,
        collision: l,
        build: n,
        paintNoteOrBox: g,
        Type: r,
        NotePosition: s,
        regExp: p,
        groups: q
    }
}();
var SEQ = SEQ || {};
SEQ.entityAutoNumber = function () {
    function a(a) {
        var d = b.exec(a);
        if (null != d && d.length > c.STATUS) {
            var e, f = d[c.STATUS];
            if ("on" === f) var g = !0; else "off" === f ? g = !1 : isNaN(f) ? g = !0 : (g = !0, e = f);
            return {raw: a, enabled: g, value: e}
        }
    }

    var b = new RegExp("^\\s*(autonumber)\\s?(on|off|[0-9]+)?"), c = {AUTO_NUMBER: 1, STATUS: 2},
        d = {AUTO_NUMBER: "autonumber"};
    return {parse: a, regExp: b, groups: c, Type: d}
}();
var SEQ = SEQ || {};
SEQ.entityLinear = function () {
    function a(a) {
        var d = b.exec(a);
        if (null != d && d.length > c.STATUS) {
            var e = d[c.STATUS];
            if ("on" === e) var f = !0; else f = "off" !== e && "end" !== e;
            return {raw: a, enabled: f}
        }
    }

    var b = new RegExp("^\\s*(linear)\\s?(on|off|end)?"), c = {LINEAR: 1, STATUS: 2}, d = {LINEAR: "linear"};
    return {parse: a, regExp: b, groups: c, Type: d}
}();
var SEQ = SEQ || {};
SEQ.entityFragment = function () {
    function a(a, b) {
        return a ? a : b
    }

    function b(b) {
        var e = SEQ.parser.diagram.ongoingFragments, f = B.exec(b);
        if (null != f && f.length > C.OPERATOR) {
            var g = f[C.TEXT], h = f[C.OPERATOR], i = f[C.GROUP_LABEL];
            i && (i = i.trim(), h = D.GROUP, g = f[C.GROUP_CONDITION]);
            var j = a(f[C.COLOR_NAME_FRAGMENT], f[C.COLOR_HEX_FRAGMENT]);
            j || (j = a(f[C.COLOR_NAME_FRAGMENT_GROUP], f[C.COLOR_HEX_FRAGMENT_GROUP]));
            var k = a(f[C.COLOR_NAME_LABEL], f[C.COLOR_HEX_LABEL]);
            if (k || (k = a(f[C.COLOR_NAME_LABEL_GROUP], f[C.COLOR_HEX_LABEL_GROUP])), D.END !== h) {
                if (D.ELSE === h) {
                    for (var l = {}, p = !1, q = e.length - 1; q >= 0; q--) {
                        var r = e[q];
                        if (r.type == D.ALT) {
                            var v = {position: l, totalHeight: SEQ.metrics.data.fragmentHeight, text: g};
                            r.elseGuards.push(v), p = !0;
                            break
                        }
                    }
                    return p ? {
                        type: h,
                        fragment: r,
                        elseGuard: v,
                        totalHeight: SEQ.metrics.data.fragmentHeight,
                        topMargin: SEQ.metrics.data.entityMarginTop,
                        position: l,
                        raw: b,
                        paint: n,
                        updatePos: function (a, b) {
                            a.elseGuard.position.posY = b
                        },
                        collision: s,
                        collisionTypeAreas: t
                    } : {raw: b}
                }
                if (D.THREAD === h) {
                    for (var x = {}, y = !1, z = e.length - 1; z >= 0; z--) {
                        var A = e[z];
                        if (A.type == D.PAR) {
                            var E = {position: x, totalHeight: SEQ.metrics.data.fragmentHeight, text: g};
                            A.threads.push(E), y = !0;
                            break
                        }
                    }
                    return y ? {
                        type: h,
                        fragment: A,
                        thread: E,
                        totalHeight: SEQ.metrics.data.fragmentHeight,
                        topMargin: SEQ.metrics.data.entityMarginTop,
                        position: x,
                        raw: b,
                        paint: n,
                        updatePos: function (a, b) {
                            a.thread.position.posY = b
                        },
                        collision: s,
                        collisionTypeAreas: t
                    } : {raw: b}
                }
                if (j) {
                    var F = SEQ.main.getMeasurementContext(), G = F.fillStyle;
                    F.fillStyle = j;
                    var H = d(F.fillStyle), I = c(H, .8);
                    F.fillStyle = G
                }
                for (var J = {}, K = {
                    type: h,
                    groupLabel: i,
                    text: g,
                    colorFragment: j,
                    colorLabel: k,
                    backgroundColor: I,
                    font: "bold " + SEQ.main.getFontSmall(),
                    enclosedEntitiesData: [],
                    subFragments: [],
                    elseGuards: [],
                    threads: [],
                    leftWidth: 0,
                    rightWidth: 0,
                    topMargin: SEQ.metrics.data.entityMarginTop,
                    startPosition: J,
                    totalHeight: SEQ.metrics.data.fragmentHeight,
                    raw: b
                }, L = 0; L < e.length; L++) {
                    var M = e[L];
                    M.subFragments.push(K)
                }
                if (e.push(K), D.EXPANDABLE_PLUS === h) {
                    g || (g = "");
                    var N = SEQ.textUtil.parseTextData(g), O = {
                        type: h,
                        fragment: K,
                        textData: N,
                        totalHeight: N.height + 2 * SEQ.metrics.data.textPadding + SEQ.metrics.data.fragmentHeight,
                        topMargin: SEQ.metrics.data.entityMarginTop,
                        position: J,
                        raw: b,
                        collision: w,
                        collisionTypeAreas: u,
                        paint: m
                    };
                    return K.startEntry = O, O
                }
                return {
                    type: h,
                    fragment: K,
                    totalHeight: K.totalHeight,
                    topMargin: K.topMargin,
                    position: J,
                    raw: b,
                    paint: n,
                    paintLayer2: o,
                    updatePos: function (a, b) {
                        a.fragment.startPosition.posY = b
                    },
                    collision: s,
                    collisionTypeAreas: t
                }
            }
            if (e.length > 0) {
                var P = e.pop();
                SEQ.parser.diagram.fragments.push(P);
                var Q = {};
                return P.endPosition = Q, P.type === SEQ.entityFragment.Type.EXPANDABLE_PLUS ? {
                    type: h,
                    fragment: P,
                    totalHeight: 0,
                    topMargin: 0,
                    position: Q,
                    raw: b
                } : {
                    type: h,
                    fragment: P,
                    totalHeight: 0,
                    topMargin: SEQ.metrics.data.entityMarginTop,
                    position: Q,
                    raw: b,
                    paint: n,
                    updatePos: function (a, b) {
                        a.fragment.endPosition.posY = b
                    },
                    collision: s,
                    collisionTypeAreas: t
                }
            }
        }
    }

    function c(a, b) {
        var c = b < 0 ? 0 : 255, d = b < 0 ? b * -1 : b, e = parseInt(a[0]), f = parseInt(a[1]), g = parseInt(a[2]);
        return "rgb(" + (Math.round((c - e) * d) + e) + "," + (Math.round((c - f) * d) + f) + "," + (Math.round((c - g) * d) + g) + ")"
    }

    function d(a) {
        var b = parseInt(a.substring(1), 16), c = (16711680 & b) >> 16, d = (65280 & b) >> 8, e = 255 & b;
        return [c, d, e]
    }

    function e(a) {
        for (var b = SEQ.parser.diagram.ongoingFragments, c = 0; c < b.length; c++) {
            var d = b[c];
            d.type === SEQ.entityFragment.Type.EXPANDABLE_PLUS && a.fragment != d && (a.enclosingCollapsedFragment = d)
        }
    }

    function f(a, b, c, d, e, f) {
        function g(a) {
            for (var b = 0; b < i.enclosedEntitiesData.length; b++) {
                var c = i.enclosedEntitiesData[b];
                if (a == c.participantName) return c
            }
        }

        for (var h = 0; h < f.length; h++) {
            var i = f[h], j = g(a);
            j ? (b > j.entityLeftWidth && (j.entityLeftWidth = b), c > j.entityRightWidth && (j.entityRightWidth = c), d > j.timelineLeftWidth && (j.timelineLeftWidth = d), e > j.timelineRightWidth && (j.timelineRightWidth = e)) : i.enclosedEntitiesData.push({
                participantName: a,
                entityLeftWidth: b,
                entityRightWidth: c,
                timelineLeftWidth: d,
                timelineRightWidth: e
            })
        }
    }

    function g(a) {
        if (a.toParticipantName) SEQ.entityParticipant.storeParticipantsAndCalcWidths(a.fromParticipantName, a.toParticipantName, a.totalWidth); else {
            var b = a.totalWidth / 2;
            SEQ.entityParticipant.storeParticipantWithDefinedWidths(a.fromParticipantName, b, b)
        }
    }

    function h() {
        for (var a = j(), b = SEQ.parser.diagram.fragments, c = 0; c < b.length; c++) {
            for (var d = b[c], e = Number.POSITIVE_INFINITY, f = Number.NEGATIVE_INFINITY, h = null, k = null, l = 0; l < d.enclosedEntitiesData.length; l++) {
                var m = d.enclosedEntitiesData[l], n = a[m.participantName];
                n < e && (e = n, h = m), n > f && (f = n, k = m)
            }
            if (!h) {
                var o = SEQ.parser.diagram.participants[0];
                h = {
                    participantName: o.name,
                    entityLeftWidth: o.entityLeftWidth,
                    entityRightWidth: o.entityRightWidth,
                    timelineLeftWidth: o.timelineLeftWidth,
                    timelineRightWidth: o.timelineRightWidth
                }
            }
            if (!k) {
                var p = SEQ.parser.diagram.participants[SEQ.parser.diagram.participants.length - 1];
                k = {
                    participantName: p.name,
                    entityLeftWidth: p.entityLeftWidth,
                    entityRightWidth: p.entityRightWidth,
                    timelineLeftWidth: o.timelineLeftWidth,
                    timelineRightWidth: o.timelineRightWidth
                }
            }
            if (d.participantDataMin = h, d.participantDataMax = k, d.type === SEQ.entityFragment.Type.EXPANDABLE_PLUS) {
                var q = d.startEntry.textData.width, r = SEQ.metrics.calcWidth(d.type, d.font);
                r > q && (q = r), h.participantName != k.participantName ? (d.startEntry.totalWidth = q + 2 * SEQ.metrics.data.textPadding, d.startEntry.fromParticipantName = h.participantName, d.startEntry.toParticipantName = k.participantName) : (d.startEntry.totalWidth = q + 2 * SEQ.metrics.data.textPadding + 2 * SEQ.metrics.data.boxBleed + 2 * SEQ.metrics.data.entryMarginSide, d.startEntry.fromParticipantName = h.participantName), g(d.startEntry)
            }
            var s = i(d.subFragments, h, k), t = SEQ.metrics.data.fragmentBleed, u = SEQ.metrics.data.fragmentBleed;
            SEQ.entityParticipant.isSpecialParticipantLeftName(h.participantName) && (t = 0);
            var v = Math.max(t, h.entityLeftWidth);
            s.leftWidth > v && (v = s.leftWidth), SEQ.entityParticipant.isSpecialParticipantRightName(k.participantName) && (u = 0);
            var w = Math.max(u, k.entityRightWidth);
            s.rightWidth > w && (w = s.rightWidth), d.leftWidth = v, d.rightWidth = w;
            var x = SEQ.parser.diagram.participantsByName[h.participantName],
                y = SEQ.parser.diagram.participantsByName[k.participantName];
            SEQ.entityParticipant.updateParticipantEntityWidths(x, v + SEQ.metrics.data.fragmentMarginSide, 0), SEQ.entityParticipant.updateParticipantEntityWidths(y, 0, w + SEQ.metrics.data.fragmentMarginSide)
        }
    }

    function i(a, b, c) {
        for (var d = 0, e = 0, f = 0; f < a.length; f++) {
            var g, h, i = a[f];
            i.type === SEQ.entityFragment.Type.EXPANDABLE_PLUS ? i.startEntry.toParticipantName ? (g = 0, h = 0) : (g = i.startEntry.totalWidth / 2, h = i.startEntry.totalWidth / 2) : (g = i.leftWidth, h = i.rightWidth), i.participantDataMin.participantName == b.participantName && g > d && (d = g), i.participantDataMax.participantName == c.participantName && h > e && (e = h)
        }
        return {leftWidth: d + SEQ.metrics.data.fragmentMarginSide, rightWidth: e + SEQ.metrics.data.fragmentMarginSide}
    }

    function j() {
        for (var a = SEQ.parser.diagram.participants, b = [], c = 0; c < a.length; c++) b[a[c].name] = c;
        return b
    }

    function k(a, b) {
        return a + 2 * SEQ.metrics.data.fragmentLabelSidePadding + b + SEQ.metrics.data.fragmentLabelEdgeLength
    }

    function l(a) {
        var b = SEQ.parser.diagram.participantsByName[a.fromParticipantName].posX, c = null;
        return a.toParticipantName && (c = SEQ.parser.diagram.participantsByName[a.toParticipantName].posX), {
            fromX: b,
            toX: c
        }
    }

    function m(a, b, c) {
        var d, e, f, g = l(a), h = g.fromX, i = g.toX, j = SEQ.metrics.data.boxBleed,
            k = a.position.posY - a.totalHeight / 2 - a.textData.height / 2 - SEQ.metrics.data.fragmentLineWeight / 2;
        if (i) {
            var m = i > h ? h : i;
            d = m - j, f = Math.abs(h - i) + 2 * j, e = d + f / 2 - a.textData.width / 2
        } else d = h - a.totalWidth / 2 + SEQ.metrics.data.entryMarginSide, f = a.totalWidth - 2 * SEQ.metrics.data.entryMarginSide, e = h - a.textData.width / 2;
        b.save(), b.lineWidth = SEQ.metrics.data.fragmentLineWeight, b.font = "bold " + SEQ.main.getFontSmall(), p(b, b.font, d, a.position.posY - a.totalHeight, SEQ.metrics.data.fragmentHeight, a.position.posY, d + f, a.type, a.fragment.colorFragment, a.fragment.backgroundColor, !0, a.fragment.colorLabel), b.restore(), k += SEQ.metrics.data.fragmentHeight / 2, SEQ.textUtil.fillText(b, c, a.textData.parsedLines, e, k)
    }

    function n(a, b, c, d) {
        function e(a) {
            if (b.save(), b.setLineDash([SEQ.metrics.data.fragmentOperandLineDashWidth]), b.beginPath(), b.moveTo(h, a.position.posY - a.totalHeight), b.lineTo(i, a.position.posY - a.totalHeight), b.stroke(), b.restore(), a.text) {
                var c = k(h, SEQ.metrics.calcWidth(f.type, f.font));
                b.fillText("[" + a.text + "]", c + SEQ.metrics.data.fragmentTextSideMargin, a.position.posY - SEQ.metrics.data.fragmentTextPosYOffset)
            }
        }

        var f = a.fragment;
        if (a.type != D.END && f.endPosition || c || d) {
            var g = v(f), h = g.minX, i = g.maxX, j = f.startPosition.posY - f.totalHeight;
            if (b.save(), b.lineWidth = SEQ.metrics.data.fragmentLineWeight, b.font = f.font, D.ELSE == a.type) (c || d) && e(a.elseGuard); else if (D.THREAD == a.type) (c || d) && e(a.thread); else {
                var l = f.type;
                f.groupLabel && (l = f.groupLabel), p(b, f.font, h, j, f.totalHeight, f.endPosition.posY, i, l, f.colorFragment, null, !1, f.text, f.colorLabel), f.elseGuards.forEach(function (a) {
                    e(a)
                }), f.threads.forEach(function (a) {
                    e(a)
                })
            }
            b.restore()
        }
    }

    function o(a, b) {
        if (a.fragment.backgroundColor && a.type != D.END && a.type != D.ELSE && a.type != D.THREAD) {
            var c = a.fragment, d = v(c), e = d.minX, f = d.maxX, g = c.startPosition.posY - c.totalHeight,
                h = b.fillStyle;
            b.fillStyle = a.fragment.backgroundColor, b.fillRect(e, g, f - e, c.endPosition.posY - g), b.fillStyle = h
        }
    }

    function p(a, b, c, d, e, f, g, h, i, j, l, m, n) {
        var o = SEQ.metrics.calcWidth(h, b), p = k(c, o), q = a.fillStyle;
        if (i ? a.fillStyle = i : a.fillStyle = "white", a.beginPath(), a.rect(c, d, g - c, f - d), l) {
            var r = a.fillStyle;
            j && (a.fillStyle = j), a.fill(), a.fillStyle = r
        }
        a.stroke(), a.beginPath(), a.moveTo(c, d), a.lineTo(c, d + e), a.lineTo(c + 2 * SEQ.metrics.data.fragmentLabelSidePadding + o, d + e), a.lineTo(p, d + SEQ.metrics.data.fragmentLabelSmallHeight), a.lineTo(p, d), a.lineTo(c, d), a.fill(), a.stroke(), n ? a.fillStyle = n : a.fillStyle = q, a.fillText(h, c + SEQ.metrics.data.fragmentLabelSidePadding, d + e - SEQ.metrics.data.fragmentTextPosYOffset), a.fillStyle = q, m && a.fillText("[" + m + "]", p + SEQ.metrics.data.fragmentTextSideMargin, d + e - SEQ.metrics.data.fragmentTextPosYOffset)
    }

    function q(a, b) {
        for (var c = SEQ.parser.diagram.fragments, d = 0; d < c.length; d++) {
            var e = c[d];
            if (b == e.type) {
                var f = v(e);
                if (a.y > e.startPosition.posY - e.totalHeight && a.y < e.endPosition.posY + e.topMargin && a.x > f.minX && a.x < f.maxX) return !0
            }
        }
    }

    function r(a) {
        return a.indexOf("expandable") > -1
    }

    function s(a, b, c) {
        if (r(a.type) && y(a, b, c, !1)) return E.TOGGLE;
        var d = a.fragment;
        if (!d.participantDataMin || !d.participantDataMax) return {main: {startX: 0, endX: 0, startY: 0, endY: 0}};
        var e = v(d);
        return a.type === D.END ? {
            main: {
                startX: e.minX,
                endX: e.maxX,
                startY: a.position.posY + SEQ.metrics.data.collisionBleed / 2,
                endY: a.position.posY - SEQ.metrics.data.collisionBleed / 2
            }
        } : {main: {startX: e.minX, endX: e.maxX, startY: a.position.posY, endY: a.position.posY - a.totalHeight}}
    }

    function t() {
        var a = this.collision(this).main, b = [];
        if (r(this.type)) {
            var c = x(this, !1);
            b.push({minX: c.startX, maxX: c.endX, minY: c.endY, maxY: c.startY, type: "zoom-out"}, {
                minX: c.endX,
                maxX: a.endX,
                minY: a.endY,
                maxY: a.startY,
                type: "move"
            })
        } else {
            var d;
            d = this.type === D.END ? "ns-resize" : "pointer", b.push({
                minX: a.startX,
                maxX: a.endX,
                minY: a.endY,
                maxY: a.startY,
                type: d
            })
        }
        return b
    }

    function u() {
        var a = this.collision(this).main, b = x(this, !0), c = [];
        return c.push({minX: b.startX, maxX: b.endX, minY: b.endY, maxY: b.startY, type: "zoom-in"}, {
            minX: a.startX,
            maxX: b.endX,
            minY: b.startY,
            maxY: a.startY,
            type: "move"
        }, {minX: b.endX, maxX: a.endX, minY: a.endY, maxY: a.startY, type: "move"}), c
    }

    function v(a) {
        var b = SEQ.parser.diagram.participantsByName, c = b[a.participantDataMin.participantName],
            d = c.posX - a.leftWidth - a.participantDataMin.timelineLeftWidth,
            e = b[a.participantDataMax.participantName],
            f = e.posX + a.rightWidth + a.participantDataMax.timelineRightWidth;
        return {minX: d, maxX: f}
    }

    function w(a, b, c) {
        if (r(a.type) && y(a, b, c, !0)) return E.TOGGLE;
        var d, e, f = l(a), g = f.fromX, h = f.toX;
        return h ? (g < h ? (d = g, e = h) : (d = h, e = g), d -= SEQ.metrics.data.boxBleed, e += SEQ.metrics.data.boxBleed) : (d = g - a.totalWidth / 2 + SEQ.metrics.data.entryMarginSide, e = g + a.totalWidth / 2 - SEQ.metrics.data.entryMarginSide), {
            main: {
                startX: d,
                endX: e,
                startY: a.position.posY,
                endY: a.position.posY - a.totalHeight
            }
        }
    }

    function x(a, b) {
        var c, d = a.fragment, e = SEQ.metrics.calcWidth(d.type, d.font);
        if (b) {
            var f = l(a), g = f.fromX, h = f.toX;
            if (h) {
                var i = h > g ? g : h;
                c = i - SEQ.metrics.data.boxBleed
            } else c = g - a.totalWidth / 2 + SEQ.metrics.data.entryMarginSide
        } else c = v(d).minX;
        var j = k(c, e), m = a.position.posY - a.totalHeight;
        return {startX: c, endX: j, startY: m + SEQ.metrics.data.fragmentHeight, endY: m}
    }

    function y(a, b, c, d) {
        var e = x(a, d);
        if (c < e.startY && c > e.endY && b > e.startX && b < e.endX) return !0
    }

    function z(a, b) {
        var c = a + " " + b;
        return D.ELSE != a && D.THREAD != a && (c += "\nend"), c
    }

    function A(a) {
        return null != B.exec(a) || a === D.GROUP
    }

    var B = new RegExp("^\\s*(alt|else|thread|opt|loop|par|break|critical|seq|strict|neg|ignore|consider|assert|region|end|expandable\\-|expandable\\−|expandable\\+)" + SEQ.entityParticipant.colorGroup + SEQ.entityParticipant.colorGroup + "(?:$|\\s(.*))|\\s*(?:\\s|^)(group)" + SEQ.entityParticipant.colorGroup + "\\s?([^\\[#]+)" + SEQ.entityParticipant.colorGroup + "\\s?(?:(\\[)(.*)(\\]))?"),
        C = {
            OPERATOR: 1,
            COLOR_HEX_FRAGMENT: 2,
            COLOR_NAME_FRAGMENT: 3,
            COLOR_HEX_LABEL: 4,
            COLOR_NAME_LABEL: 5,
            TEXT: 6,
            GROUP: 7,
            COLOR_HEX_FRAGMENT_GROUP: 8,
            COLOR_NAME_FRAGMENT_GROUP: 9,
            GROUP_LABEL: 10,
            COLOR_HEX_LABEL_GROUP: 11,
            COLOR_NAME_LABEL_GROUP: 12,
            GROUP_CONDITION_LEFT_BRACKET: 13,
            GROUP_CONDITION: 14,
            GROUP_CONDITION_RIGHT_BRACKET: 15
        }, D = {
            ALT: "alt",
            ELSE: "else",
            THREAD: "thread",
            OPT: "opt",
            LOOP: "loop",
            PAR: "par",
            BREAK: "break",
            CRITICAL: "critical",
            EXPANDABLE_DASH: "expandable-",
            EXPANDABLE_MINUS: "expandable−",
            EXPANDABLE_PLUS: "expandable+",
            SEQ: "seq",
            STRICT: "strict",
            NEG: "neg",
            IGNORE: "ignore",
            CONSIDER: "consider",
            ASSERT: "assert",
            END: "end",
            GROUP: "group"
        }, E = {TOGGLE: "toggle"};
    return {
        parse: b,
        paint: n,
        regExp: B,
        build: z,
        storeEnclosedEntriesData: f,
        updateParticipantWidths: h,
        populateEnclosingCollapsedFragment: e,
        collision: s,
        insideFragmentType: q,
        paintFragment: p,
        isType: A,
        Type: D,
        CollisionType: E,
        groups: C
    }
}();
var SEQ = SEQ || {};
SEQ.entityEntrySpacing = function () {
    function a(a) {
        var b = c.exec(a);
        if (null != b && b.length > d.SPACING) {
            var e = b[d.SPACING];
            return {raw: a, entrySpacing: parseFloat(e)}
        }
    }

    function b(a) {
        return a < 0 && (a = 0), "entryspacing " + a.toFixed(1)
    }

    var c = new RegExp("^\\s*(entryspacing)\\s?([0-9]+(?:\\.[0-9]+)?$)"), d = {ENTRY_SPACING: 1, SPACING: 2},
        e = {ENTRY_SPACING: "entryspacing"};
    return {parse: a, build: b, regExp: c, groups: d, Type: e}
}();
var SEQ = SEQ || {};
SEQ.entityParticipantSpacing = function () {
    function a(a) {
        var b = c.exec(a);
        if (null != b && b.length > d.SPACING) {
            var e = b[d.SPACING];
            return {raw: a, participantSpacing: e}
        }
    }

    var b = "equal", c = new RegExp("^\\s*(participantspacing)\\s?([0-9]+(?:\\.[0-9]+)?|" + b + ")$"),
        d = {PARTICIPANT_SPACING: 1, SPACING: 2}, e = {PARTICIPANT_SPACING: "participantspacing"};
    return {parse: a, equal: b, regExp: c, groups: d, Type: e}
}();
var SEQ = SEQ || {};
SEQ.entityFontSize = function () {
    function a(a) {
        var d = b.exec(a);
        if (null != d && d.length > c.SIZE) {
            var e = d[c.SIZE];
            return {raw: a, fontSize: e}
        }
    }

    var b = new RegExp("^\\s*(fontsize)\\s?([0-9]+)"), c = {FONT_SIZE: 1, SIZE: 2}, d = {FONT_SIZE: "fontsize"};
    return {parse: a, regExp: b, groups: c, Type: d}
}();
var SEQ = SEQ || {};
SEQ.entityParallel = function () {
    function a(a) {
        var d = b.exec(a);
        if (null != d && d.length > c.STATUS) {
            var e = d[c.STATUS];
            if ("on" === e) var f = !0; else f = "off" !== e && "end" !== e;
            return {raw: a, enabled: f, parallelEnabled: f}
        }
    }

    var b = new RegExp("^\\s*(parallel)\\s?(on|off|end)?"), c = {PARALLEL: 1, STATUS: 2}, d = {PARALLEL: "parallel"};
    return {parse: a, regExp: b, groups: c, Type: d}
}();
var SEQ = SEQ || {};
SEQ.entityActivation = function () {
    function a(a) {
        var c = g.exec(a);
        if (null != c && c.length > h.PARTICIPANT) {
            var f = c[h.TYPE], j = c[h.PARTICIPANT], k = c[h.COLOR_NAME], l = c[h.COLOR_HEX], m = k ? k : l,
                n = SEQ.parser.diagram.ongoingActivations[j];
            if (f.indexOf(i.DEACTIVATE) > -1) {
                if (n && n.length) {
                    var o = n.pop(), p = {
                        type: f,
                        fromParticipantName: j,
                        totalHeight: 0,
                        totalWidth: 0,
                        topMargin: 0,
                        position: {},
                        activation: !0,
                        raw: a
                    };
                    return o.deactivate = p, p
                }
            } else if (f.indexOf(i.ACTIVATE) > -1) {
                n || (SEQ.parser.diagram.ongoingActivations[j] = [], n = SEQ.parser.diagram.ongoingActivations[j]);
                var q = {
                    type: f,
                    fromParticipantName: j,
                    centerDiff: d(j),
                    totalHeight: 0,
                    totalWidth: 0,
                    topMargin: 0,
                    position: {},
                    color: m,
                    activation: !0,
                    raw: a,
                    paint: b
                };
                if (n.push(q), SEQ.entityParticipant.storeParticipantWithTimelineWidths(j, SEQ.metrics.data.activationSideWidth, e(n) + SEQ.metrics.data.activationSideWidth), !q.color) {
                    var r = SEQ.parser.diagram.participantsByName[j];
                    q.color = r.activeColor ? r.activeColor : SEQ.parser.diagram.participantActiveColor
                }
                return q
            }
        }
    }

    function b(a, b) {
        var c, d = SEQ.parser.diagram.participantsByName, e = d[a.fromParticipantName].posX + a.centerDiff;
        a.deactivate ? (c = a.deactivate.position.posY, i.DEACTIVATE_AFTER === a.deactivate.type && (c += SEQ.metrics.data.activationAfterHeight)) : c = SEQ.parser.diagram.entries[SEQ.parser.diagram.entries.length - 1].position.posY + SEQ.metrics.data.diagramMarginBottom - SEQ.metrics.data.baseSpaceMetric;
        var f = SEQ.metrics.data.activationSideWidth, g = a.position.posY;
        b.beginPath(), b.moveTo(e - f, g), b.lineTo(e + f, g), b.lineTo(e + f, c), b.lineTo(e - f, c), b.lineTo(e - f, g);
        var h = b.fillStyle;
        a.color ? b.fillStyle = a.color : b.fillStyle = "white", b.fill(), b.stroke(), b.fillStyle = h
    }

    function c(a, b) {
        return a + " " + b
    }

    function d(a) {
        var b = SEQ.parser.diagram.ongoingActivations[a];
        return b ? 0 === b.length ? 0 : b.length >= 1 ? b.length * SEQ.metrics.data.activationSideWidth : void 0 : 0
    }

    function e(a) {
        return a.length <= 1 ? 0 : (a.length - 1) * SEQ.metrics.data.activationSideWidth
    }

    function f(a) {
        return i.ACTIVATE === a || i.DEACTIVATE === a || i.DEACTIVATE_AFTER === a
    }

    var g = new RegExp("^\\s*(activate|deactivate|deactivateafter)\\s" + SEQ.entityParticipant.nameGroup + "\\s?" + SEQ.entityParticipant.colorGroup),
        h = {TYPE: 1, PARTICIPANT: 2, COLOR_NAME: 3, COLOR_HEX: 4},
        i = {ACTIVATE: "activate", DEACTIVATE: "deactivate", DEACTIVATE_AFTER: "deactivateafter"};
    return {parse: a, paint: b, build: c, calcActivationCenterDiff: e, isType: f, Type: i, regExp: g, groups: h}
}();
var SEQ = SEQ || {};
SEQ.entitySpace = function () {
    function a(a) {
        var f = h.exec(a);
        if (null != f && f.length >= i.VALUE) {
            var g = f[i.VALUE];
            return g || (g = 1), {
                type: j.SPACE,
                totalHeight: SEQ.metrics.data.baseSpaceMetric * g,
                topMargin: SEQ.metrics.data.entityMarginTop,
                position: {},
                paint: c,
                collision: d,
                collisionTypeAreas: e,
                updatePos: b,
                raw: a
            }
        }
    }

    function b(a, b) {
        a.position.posY = b
    }

    function c(a, b, c, e) {
        if (c || e) {
            var f = d(a).main;
            b.beginPath(), b.moveTo(f.startX, f.endY), b.lineTo(f.endX, f.endY), b.lineTo(f.endX, f.startY), b.lineTo(f.startX, f.startY), b.lineTo(f.startX, f.endY), b.stroke()
        }
    }

    function d(a) {
        var b = SEQ.parser.diagram.participants, c = b[b.length - 1], d = SEQ.metrics.data.entryMarginSide,
            e = c.width > c.entityRightWidth - SEQ.metrics.data.entryMarginSide ? c.width / 2 : c.entityRightWidth - SEQ.metrics.data.entryMarginSide,
            f = c.posX + c.timelineRightWidth + e;
        return {main: {startX: d, endX: f, startY: a.position.posY, endY: a.position.posY - a.totalHeight}}
    }

    function e() {
        var a = this.collision(this).main, b = [];
        return b.push({minX: a.startX, maxX: a.endX, minY: a.endY, maxY: a.startY, type: "ns-resize"}), b
    }

    function f(a) {
        return a
    }

    function g(a) {
        return j.SPACE === a
    }

    var h = new RegExp("^\\s*(space)\\s?(\\-?[0-9]+(?:\\.[0-9]+)?)?$"), i = {SPACE: 1, VALUE: 2}, j = {SPACE: "space"};
    return {parse: a, build: f, isType: g, Type: j, regExp: h, groups: i}
}();
var SEQ = SEQ || {};
SEQ.entityCreateDestroy = function () {
    function a(a) {
        var f = n.exec(a);
        if (null != f && f.length > o.PARTICIPANT) {
            var m = f[o.TYPE], q = f[o.PARTICIPANT];
            if (m === p.CREATE) {
                var r = SEQ.parser.diagram.participantsByName[q];
                r || (SEQ.entityParticipant.storeParticipantWithDefinedWidths(q), r = SEQ.parser.diagram.participantsByName[q]);
                var s = {};
                return r.createPositions.push(s), {
                    type: p.CREATE,
                    fromParticipantName: q,
                    participantToCreate: r,
                    totalHeight: r.height,
                    totalWidth: r.width,
                    topMargin: SEQ.metrics.data.entityMarginTop,
                    position: s,
                    lockedPosX: !0,
                    updateEnclosingFragments: b,
                    paint: g,
                    updatePos: c,
                    collision: i,
                    collisionTypeAreas: k,
                    raw: a
                }
            }
            if (m === p.DESTROY || m === p.DESTROY_SILENT) {
                var t = SEQ.parser.diagram.participantsByName[q];
                t || (t = SEQ.entityParticipant.storeParticipantWithDefinedWidths(q));
                var u = {};
                return t.destroyPositions.push(u), {
                    type: m,
                    fromParticipantName: q,
                    participantToDestroy: t,
                    totalHeight: 0,
                    totalWidth: SEQ.metrics.data.participantDestroySize,
                    topMargin: 0,
                    position: u,
                    lockedPosX: !0,
                    paint: h,
                    updatePos: c,
                    collision: j,
                    collisionTypeAreas: l,
                    updateEnclosingFragments: e,
                    updateParticipantWidths: d,
                    raw: a
                }
            }
            if (m === p.DESTROY_AFTER) {
                var v = SEQ.parser.diagram.participantsByName[q];
                if (v) {
                    var w = SEQ.metrics.data.participantDestroySize,
                        x = {lifeLinePosYDiff: SEQ.metrics.data.participantDestroySize / 2};
                    return v.destroyPositions.push(x), {
                        type: m,
                        fromParticipantName: q,
                        participantToDestroy: v,
                        totalHeight: w,
                        totalWidth: SEQ.metrics.data.participantDestroySize,
                        topMargin: SEQ.metrics.data.entityMarginTop,
                        position: x,
                        lockedPosX: !0,
                        paint: h,
                        updatePos: c,
                        collision: j,
                        collisionTypeAreas: l,
                        updateEnclosingFragments: e,
                        updateParticipantWidths: d,
                        raw: a
                    }
                }
            }
        }
    }

    function b(a) {
        var b = a.totalWidth / 2 + SEQ.metrics.data.entryMarginSide;
        SEQ.entityFragment.storeEnclosedEntriesData(a.fromParticipantName, b, b, 0, 0, a.snapshot.ongoingFragments)
    }

    function c(a, b, c) {
        a.position.posY = b, a.fromPosX = c
    }

    function d(a) {
        var b = a.totalWidth / 2;
        SEQ.entityParticipant.storeParticipantWithDefinedWidths(a.fromParticipantName, b, b)
    }

    function e(a) {
        var b = a.totalWidth / 2;
        SEQ.entityFragment.storeEnclosedEntriesData(a.fromParticipantName, b, b, 0, 0, a.snapshot.ongoingFragments)
    }

    function f(a) {
        return {fromPosX: SEQ.parser.diagram.participantsByName[a.fromParticipantName].posX}
    }

    function g(a, b) {
        SEQ.entityParticipant.paintParticipant(a.participantToCreate, b, a.position.posY - SEQ.parser.diagram.participantMaxHeight)
    }

    function h(a, b) {
        if (a.type.indexOf("silent") === -1) {
            var c = f(a).fromPosX, d = a.position.posY;
            a.type === p.DESTROY_AFTER && (d -= SEQ.metrics.data.participantDestroySize / 2), b.save(), b.lineWidth = SEQ.metrics.data.participantDestroyLineWeight, b.beginPath();
            var e = SEQ.metrics.data.participantDestroySize / 2;
            b.moveTo(c - e, d - e), b.lineTo(c + e, d + e), b.moveTo(c + e, d - e), b.lineTo(c - e, d + e), b.stroke(), b.restore()
        }
    }

    function i(a) {
        var b = f(a).fromPosX;
        return {
            participantToCreate: {
                startX: b - a.participantToCreate.width / 2,
                endX: b + a.participantToCreate.width / 2,
                startY: a.position.posY,
                endY: a.position.posY - a.totalHeight
            }
        }
    }

    function j(a) {
        var b, c, d = f(a).fromPosX, e = SEQ.metrics.data.participantDestroySize / 2;
        return a.type === p.DESTROY_AFTER ? (b = a.position.posY, c = a.position.posY - SEQ.metrics.data.participantDestroySize) : (b = a.position.posY + e, c = a.position.posY - e), {
            main: {
                startX: d - a.totalWidth / 2,
                endX: d + a.totalWidth / 2,
                startY: b,
                endY: c
            }
        }
    }

    function k() {
        var a = this.collision(this).participantToCreate, b = [];
        return b.push({minX: a.startX, maxX: a.endX, minY: a.endY, maxY: a.startY, type: "move"}), b
    }

    function l() {
        var a = this.collision(this).main, b = [];
        return b.push({minX: a.startX, maxX: a.endX, minY: a.endY, maxY: a.startY, type: "move"}), b
    }

    function m(a) {
        var b = n.exec(a);
        if (null != b && b.length > o.PARTICIPANT && b[o.TYPE] === p.CREATE) return b[o.PARTICIPANT]
    }

    var n = new RegExp("^\\s*(create|destroy|destroyafter|destroysilent)\\s" + SEQ.entityParticipant.nameGroup),
        o = {TYPE: 1, PARTICIPANT: 2},
        p = {CREATE: "create", DESTROY: "destroy", DESTROY_AFTER: "destroyafter", DESTROY_SILENT: "destroysilent"};
    return {parse: a, paint: h, createdParticipant: m, Type: p, regExp: n, groups: o}
}();
var SEQ = SEQ || {};
SEQ.entityActiveColor = function () {
    function a(a) {
        var d = b.exec(a);
        if (null != d && d.length > c.COLOR_NAME) {
            var e = d[c.PARTICIPANT], f = d[c.COLOR_NAME], g = d[c.COLOR_HEX], h = f ? f : g;
            if (e) {
                var i = SEQ.parser.diagram.participantsByName[e];
                return i || (i = SEQ.entityParticipant.storeParticipantWithDefinedWidths(e)), i.activeColor = h, {raw: a}
            }
            return SEQ.parser.diagram.participantActiveColor = h, {raw: a}
        }
    }

    var b = new RegExp("^\\s*(activecolor)\\s" + SEQ.entityParticipant.nameGroup + "?\\s?" + SEQ.entityParticipant.colorGroupMandatory),
        c = {ACTIVE_COLOR: 1, PARTICIPANT: 2, COLOR_NAME: 3, COLOR_HEX: 4}, d = {ACTIVE_COLOR: "activecolor"};
    return {parse: a, regExp: b, groups: c, Type: d}
}();
var SEQ = SEQ || {};
SEQ.entityLifeLineColor = function () {
    function a(a) {
        var d = b.exec(a);
        if (null != d && d.length > c.COLOR_NAME) {
            var e = d[c.PARTICIPANT], f = d[c.COLOR_NAME], g = d[c.COLOR_HEX], h = f ? f : g;
            if (e) {
                var i = SEQ.parser.diagram.participantsByName[e];
                return i || (i = SEQ.entityParticipant.storeParticipantWithDefinedWidths(e)), i.lifeLineColor = h, {raw: a}
            }
            return SEQ.parser.diagram.participantLifeLineColor = h, {raw: a}
        }
    }

    var b = new RegExp("^\\s*(lifelinecolor)\\s" + SEQ.entityParticipant.nameGroup + "?\\s?" + SEQ.entityParticipant.colorGroupMandatory),
        c = {LIFE_LINE_COLOR: 1, PARTICIPANT: 2, COLOR_NAME: 3, COLOR_HEX: 4}, d = {LIFE_LINE_COLOR: "lifelinecolor"};
    return {parse: a, regExp: b, groups: c, Type: d}
}();
var SEQ = SEQ || {};
SEQ.entityLifeLineWeight = function () {
    function a(a) {
        var d = b.exec(a);
        if (null != d && d.length > c.VALUE) return SEQ.parser.diagram.participantLifeLineWeight = d[c.VALUE], {raw: a}
    }

    var b = new RegExp("^\\s*(lifelineweight)\\s?([0-9]+(?:\\.[0-9]+)?)$"), c = {LIFE_LINE_WEIGHT: 1, VALUE: 2},
        d = {LIFE_LINE_WEIGHT: "lifelineweight"};
    return {parse: a, regExp: b, groups: c, Type: d}
}();
var SEQ = SEQ || {};
SEQ.entityParticipantGroup = function () {
    function a(a) {
        var b = e.exec(a);
        if (null != b && b.length > f.PARTICIPANT_GROUP) {
            var c = b[f.PARTICIPANT_GROUP] ? b[f.PARTICIPANT_GROUP] : b[f.END],
                h = SEQ.parser.diagram.ongoingParticipantGroups;
            if (g.END === c) {
                if (h.length > 0) {
                    var i = h.pop(), j = i.enclosedParticipants[0],
                        k = i.enclosedParticipants[i.enclosedParticipants.length - 1];
                    return SEQ.entityParticipant.updateParticipantOuterWidths(j, SEQ.metrics.data.participantMarginSide, 0), SEQ.entityParticipant.updateParticipantOuterWidths(k, 0, SEQ.metrics.data.participantMarginSide), i.ended = !0, i.outerLeftWidth = j.outerLeftWidth, i.outerRightWidth = k.outerRightWidth, SEQ.parser.diagram.participantGroups.push(i), {
                        type: c,
                        participantGroup: i,
                        totalHeight: 0,
                        totalWidth: 0,
                        topMargin: 0,
                        position: {},
                        raw: a
                    }
                }
            } else if (g.PARTICIPANT_GROUP === c) {
                var l = b[f.COLOR_NAME] ? b[f.COLOR_NAME] : b[f.COLOR_HEX];
                if (b[f.TITLE]) var m = SEQ.textUtil.parseTextData(b[f.TITLE]);
                var n = SEQ.metrics.data.participantGroupPadding;
                m && (n += m.height + SEQ.metrics.data.participantGroupPadding);
                var o = {
                    textData: m,
                    height: n,
                    color: l,
                    enclosedParticipants: [],
                    enclosedParticipantGroups: [],
                    raw: a,
                    calcHeight: function () {
                        var a = 0;
                        return this.enclosedParticipantGroups.forEach(function (b) {
                            var c = b.calcHeight();
                            c > a && (a = c)
                        }), this.height + a
                    }
                };
                return h.forEach(function (a) {
                    a.enclosedParticipantGroups.push(o)
                }), h.push(o), {
                    type: c,
                    participantGroup: o,
                    totalHeight: 0,
                    totalWidth: 0,
                    topMargin: 0,
                    position: {},
                    raw: a,
                    paintLayer1: d
                }
            }
        }
    }

    function b(a, b) {
        var c = a + " " + b;
        return g.ELSE != a && (c += "\nend"), c
    }

    function c(a) {
        return null != e.exec(a) || a === g.GROUP
    }

    function d(a, b, c) {
        if (a.participantGroup.ended) {
            var d, e, f = c.height, g = 0;
            a.participantGroup.enclosedParticipants.forEach(function (a) {
                (!d || a.posX < d.posX) && (d = a), (!e || a.posX > e.posX) && (e = a), a.height > g && (g = a.height)
            });
            var h = a.participantGroup.color;
            b.save(), b.beginPath();
            var i = d.posX - d.width / 2 - a.participantGroup.outerLeftWidth,
                j = e.posX + e.width / 2 + a.participantGroup.outerRightWidth,
                k = SEQ.metrics.data.participantMarginTop;
            SEQ.parser.diagram.title && (k += SEQ.parser.diagram.title.totalHeight), SEQ.parser.diagram.frame && (k += SEQ.parser.diagram.frame.totalHeight), k += SEQ.metrics.data.participantTypeLineWeight / 2, k += SEQ.parser.diagram.maxParticipantGroupHeight, k -= a.participantGroup.calcHeight(), k += SEQ.parser.diagram.participantMaxHeight - g;
            var l = f - SEQ.metrics.data.participantBottomMargin;
            b.moveTo(i, k), b.lineTo(j, k), b.lineTo(j, l), b.lineTo(i, l), b.lineTo(i, k);
            var m = b.fillStyle;
            if (h && (b.fillStyle = h, b.fill()), b.fillStyle = m, b.stroke(), b.restore(), a.participantGroup.textData) {
                var n = (i + j) / 2 - a.participantGroup.textData.width / 2,
                    o = k + SEQ.metrics.data.participantGroupPadding;
                SEQ.textUtil.fillText(b, !1, a.participantGroup.textData.parsedLines, n, o)
            }
        }
    }

    var e = new RegExp("^\\s*(participantgroup)" + SEQ.entityParticipant.colorGroup + "(?:$|\\s(.*))|^\\s*(end)"),
        f = {PARTICIPANT_GROUP: 1, COLOR_HEX: 2, COLOR_NAME: 3, TITLE: 4, END: 5},
        g = {PARTICIPANT_GROUP: "participantgroup", END: "end"};
    return {parse: a, paintLayer1: d, regExp: e, build: b, isType: c, Type: g, groups: f}
}();
var SEQ = SEQ || {};
SEQ.entityFrame = function () {
    function a(a) {
        var j = k.exec(a);
        if (null != j && j.length > l.TEXT) {
            var n = c(j[l.COLOR_NAME_FRAGMENT], j[l.COLOR_HEX_FRAGMENT]);
            n || (n = c(j[l.COLOR_NAME_FRAGMENT_GROUP], j[l.COLOR_HEX_FRAGMENT_GROUP]));
            var o = c(j[l.COLOR_NAME_LABEL], j[l.COLOR_HEX_LABEL]);
            if (o || (o = c(j[l.COLOR_NAME_LABEL_GROUP], j[l.COLOR_HEX_LABEL_GROUP])), n) {
                var p = SEQ.main.getMeasurementContext(), q = p.fillStyle;
                p.fillStyle = n;
                var r = e(p.fillStyle), s = d(r, .8);
                p.fillStyle = q
            }
            return {
                type: m.FRAME,
                text: j[l.TEXT],
                colorFragment: n,
                colorLabel: o,
                backgroundColor: s,
                sdFont: "bold " + SEQ.main.getFontNormal(),
                nameFont: SEQ.main.getFontNormal(),
                topMargin: 0,
                totalHeight: SEQ.metrics.data.frameHeight + SEQ.metrics.data.frameMargin,
                labelHeight: SEQ.metrics.data.frameHeight,
                position: {},
                paint: g,
                paintLayer0: f,
                collision: h,
                collisionTypeAreas: i,
                build: b,
                raw: a
            }
        }
    }

    function b(a, b) {
        return b + m.FRAME + " " + a
    }

    function c(a, b) {
        return a ? a : b
    }

    function d(a, b) {
        var c = b < 0 ? 0 : 255, d = b < 0 ? b * -1 : b, e = parseInt(a[0]), f = parseInt(a[1]), g = parseInt(a[2]);
        return "rgb(" + (Math.round((c - e) * d) + e) + "," + (Math.round((c - f) * d) + f) + "," + (Math.round((c - g) * d) + g) + ")"
    }

    function e(a) {
        var b = parseInt(a.substring(1), 16), c = (16711680 & b) >> 16, d = (65280 & b) >> 8, e = 255 & b;
        return [c, d, e]
    }

    function f(a, b, c) {
        if (a.backgroundColor) {
            var d = b.fillStyle;
            b.fillStyle = a.backgroundColor;
            var e = SEQ.metrics.data.frameMarginCanvas;
            b.fillRect(e, e, c.width - 2 * e, c.height - 2 * e), b.fillStyle = d
        }
    }

    function g(a, b, c, d, e) {
        var f = SEQ.metrics.data.frameMarginCanvas;
        b.save();
        var g = SEQ.metrics.calcWidth("sd ", a.sdFont), h = g + SEQ.metrics.calcWidth(a.text, a.nameFont),
            i = f + 2 * SEQ.metrics.data.frameLabelSidePadding + h + SEQ.metrics.data.frameLabelEdgeLength,
            j = b.fillStyle;
        a.colorFragment ? b.fillStyle = a.colorFragment : b.fillStyle = "white", b.beginPath(), b.rect(f, f, e.width - 2 * f, e.height - 2 * f), b.stroke(), b.beginPath(), b.moveTo(f, f), b.lineTo(f, f + a.labelHeight), b.lineTo(f + 2 * SEQ.metrics.data.frameLabelSidePadding + h, f + a.labelHeight), b.lineTo(i, f + SEQ.metrics.data.frameLabelSmallHeight), b.lineTo(i, f), b.lineTo(f, f), b.fill(), b.stroke(), a.colorLabel ? b.fillStyle = a.colorLabel : b.fillStyle = j, b.font = a.sdFont;
        var k = f + SEQ.metrics.data.frameLabelSidePadding,
            l = f + a.labelHeight - SEQ.metrics.data.frameTextPosYOffset;
        b.fillText("sd", k, l), b.font = a.nameFont, b.fillText(a.text, k + g, l), b.fillStyle = j, b.restore()
    }

    function h() {
        return {
            main: {
                startX: 0,
                endX: Number.MAX_VALUE,
                startY: SEQ.metrics.data.frameMarginCanvas + this.labelHeight,
                endY: SEQ.metrics.data.frameMarginCanvas
            }
        }
    }

    function i() {
        var a = this.collision().main, b = [], c = "pointer";
        return b.push({minX: a.startX, maxX: a.endX, minY: a.endY, maxY: a.startY, type: c}), b
    }

    function j(a) {
        return a === m.FRAME
    }

    var k = new RegExp("^\\s*(frame)" + SEQ.entityParticipant.colorGroup + SEQ.entityParticipant.colorGroup + "\\s(.*)"),
        l = {FRAME: 1, COLOR_HEX_FRAGMENT: 2, COLOR_NAME_FRAGMENT: 3, COLOR_HEX_LABEL: 4, COLOR_NAME_LABEL: 5, TEXT: 6},
        m = {FRAME: "frame"};
    return {parse: a, paint: g, isType: j, Type: m, regExp: k, groups: l}
}();
var SEQ = SEQ || {}, canvasSize = null;
SEQ.painter = function () {
    function a() {
        var a = SEQ.parser.diagram;
        canvasSize = g(), f(canvasSize);
        var h = SEQ.main.getDiagramContext();
        h.save(), h.fillStyle = "white";
        var i = SEQ.main.getDiagramCanvas();
        if (h.fillRect(0, 0, i.width, i.height), h.restore(), a.title && (h.save(), SEQ.entityTitle.paint(canvasSize), h.restore()), a.participants.length > 0 && (h.save(), b(canvasSize), h.restore(), h.save(), e(canvasSize, h), h.restore(), h.save(), c(), h.restore(), h.save(), d(canvasSize), h.restore(), !SEQ.main.isRunningNode())) {
            var j = SEQ.main.getParticipantContext();
            a.participants.forEach(function (a) {
                SEQ.entityParticipant.paint(a, j, !0)
            })
        }
    }

    function b(a) {
        var b = SEQ.parser.diagram, c = SEQ.main.getDiagramContext(), d = [], e = [], f = [];
        b.entries.forEach(function (a) {
            a.enclosingCollapsedFragment || (a.paintLayer0 && d.push(a), a.paintLayer1 && e.push(a), a.paintLayer2 && f.push(a))
        }), d.forEach(function (b) {
            b.paintLayer0(b, c, a)
        }), e.forEach(function (b) {
            b.paintLayer1(b, c, a)
        }), f.forEach(function (b) {
            b.paintLayer2(b, c, a)
        })
    }

    function c() {
        var a = SEQ.parser.diagram, b = SEQ.main.getDiagramContext();
        a.participants.forEach(function (a) {
            SEQ.entityParticipant.paint(a, b)
        })
    }

    function d(a) {
        var b = SEQ.parser.diagram, c = SEQ.main.getDiagramContext(), d = [], e = [], f = [];
        b.entries.forEach(function (a) {
            a.paint && !a.enclosingCollapsedFragment && (a.fragment ? f.push(a) : a.activation ? d.push(a) : e.push(a))
        }), d.forEach(function (b) {
            b.paint(b, c, !1, !1, a)
        }), e.forEach(function (b) {
            b.paint(b, c, !1, !1, a)
        }), f.forEach(function (b) {
            b.paint(b, c, !1, !1, a)
        })
    }

    function e(a, b) {
        var c = SEQ.parser.diagram, d = SEQ.metrics.data;
        c.participantLifeLineWeight ? b.lineWidth = c.participantLifeLineWeight : b.lineWidth = SEQ.metrics.data.diagramLifeLineWeight, c.participants.forEach(function (e) {
            if (!SEQ.entityParticipant.isSpecialParticipantName(e.name)) {
                void 0 !== b.setLineDash && b.setLineDash([SEQ.metrics.data.diagramLifeLineDashSize, SEQ.metrics.data.diagramLifeLineSpaceSize]), e.lifeLineColor ? b.strokeStyle = e.lifeLineColor : c.participantLifeLineColor ? b.strokeStyle = c.participantLifeLineColor : b.strokeStyle = "black";
                var f, g, h = e.destroyPositions.slice();
                if (e.createPositions.length) e.createPositions.forEach(function (d) {
                    if (f = d.posY, h.length) {
                        var i = h.shift();
                        g = i.posY, i.lifeLinePosYDiff && (g -= i.lifeLinePosYDiff)
                    } else g = a.height, c.frame && (g -= SEQ.metrics.data.frameMargin + SEQ.metrics.data.frameMarginCanvas);
                    b.beginPath(), b.moveTo(e.posX, f), b.lineTo(e.posX, g), b.stroke()
                }); else {
                    if (f = d.participantMarginTop + c.participantMaxHeight, c.title && (f += SEQ.parser.diagram.title.totalHeight), c.frame && (f += SEQ.parser.diagram.frame.totalHeight), f += SEQ.parser.diagram.maxParticipantGroupHeight, e.destroyPositions.length) {
                        var i = e.destroyPositions.pop();
                        g = i.posY, i.lifeLinePosYDiff && (g -= i.lifeLinePosYDiff)
                    } else g = a.height, c.frame && (g -= SEQ.metrics.data.frameMargin + SEQ.metrics.data.frameMarginCanvas);
                    b.beginPath(), b.moveTo(e.posX, f), b.lineTo(e.posX, g), b.stroke()
                }
            }
        })
    }

    function f(a) {
        var b = a.width, c = a.height, d = a.heightParticipant;
        SEQ.main.getDiagramCanvas(b, c);
        var e = SEQ.main.getDiagramContext();
        if (e.font = SEQ.main.getFontNormal(), e.lineWidth = SEQ.metrics.data.diagramLineWeight, e.fillStyle = "black", e.strokeStyle = "black", !SEQ.main.isRunningNode()) {
            var f = SEQ.main.getInteractionCanvas();
            f.width = b, f.height = c;
            var g = SEQ.main.getInteractionContext();
            g.font = SEQ.main.getFontNormal(), g.lineWidth = SEQ.metrics.data.diagramLineWeight;
            var h = SEQ.main.getParticipantCanvas();
            h.width = b, h.height = d;
            var i = SEQ.main.getParticipantContext();
            i.font = SEQ.main.getFontNormal(), i.lineWidth = SEQ.metrics.data.diagramLineWeight, i.fillStyle = "black", i.strokeStyle = "black"
        }
    }

    function g() {
        var a = {width: 0, height: 0, heightParticipant: 0}, b = SEQ.parser.diagram;
        if (b.participants.length > 0) {
            var c = b.entries[b.entries.length - 1].position.posY;
            0 === c && (c = SEQ.parser.diagram.participantMaxHeight + SEQ.metrics.data.participantMarginTop), a.height = c + SEQ.metrics.data.diagramMarginBottom;
            var d = b.participants[b.participants.length - 1],
                e = Math.max(d.width / 2 + SEQ.metrics.data.participantMarginSide, d.entityRightWidth + d.timelineRightWidth),
                f = d.posX + e + d.outerRightWidth;
            b.entries.forEach(function (a) {
                SEQ.entityDivider.isType(a.type) && a.totalWidth > f && (f = a.totalWidth)
            }), a.width = f, a.heightParticipant = SEQ.parser.diagram.participantMaxHeight + SEQ.metrics.data.participantMarginTop + SEQ.metrics.data.participantBoxLineWeight, b.frame && (a.height += SEQ.metrics.data.frameMargin, a.width += SEQ.metrics.data.frameMargin)
        } else b.title && (a.height = b.title.totalHeight, a.width = SEQ.metrics.calcWidth(b.title.title, SEQ.main.getFontTitle()) + 2 * SEQ.metrics.data.textPadding);
        return a
    }

    return {
        paint: a, getCanvasSize: function () {
            return canvasSize
        }
    }
}();
var SEQ = SEQ || {};
SEQ.interactor = function () {
    function a(a) {
        F = a
    }

    function b(a) {
        var b = SEQ.main.getInteractionCanvas(), c = b.getBoundingClientRect(), d = a.clientX - c.left,
            e = a.clientY - c.top;
        return {x: d, y: e}
    }

    function c(a, b) {
        var c = 500, d = 200, e = a.pageY, f = a.pageX - c / 2;
        I = document.createElement("div"), I.style.position = "absolute", I.style.top = e + "px", I.style.left = f + "px", I.style.zIndex = 100;
        var g = document.createElement("img");
        g.setAttribute("src", "assets/closeicon.png"), g.setAttribute("onclick", "SEQ.interactor.cancelAllInteraction()"), g.style.position = "relative", g.style.top = "-13px", g.style.left = "-13px", g.style.width = "25px", g.style.height = "25px", g.style.zIndex = 200, I.appendChild(g);
        var i = document.createElement("textarea");
        i.id = "editEntryTextArea", i.style.position = "absolute", i.style.top = "0px", i.style.left = "0px", i.style.zIndex = 101, i.style.width = c + "px", i.style.height = d + "px", i.style.padding = "7px", i.onkeydown = h, I.appendChild(i), document.body.appendChild(I), b ? i.value = b : i.value = "info", i.setSelectionRange(0, i.value.length), i.focus()
    }

    function d(a, b) {
        var c = new RegExp("^" + SEQ.entityParticipant.nameGroup + "$");
        if (c.exec(b)) {
            for (var d = SEQ.parser.diagram.entries, e = "", g = 0; g < d.length; g++) {
                var h, i = d[g], j = a.name.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"),
                    k = new RegExp("(^|[^\\w\\d])" + j + "([^\\w\\d]|$)", "g");
                h = i.raw ? i.raw.replace(k, "$1" + b + "$2") : i.raw,
                    e += g === d.length - 1 ? h : h + "\n"
            }
            SEQ.main.updateSource(e)
        }
        f(), SEQ.parser.parse()
    }

    function e() {
        I && document.body.removeChild(I), I = null, F = null, G = null, H = null, x()
    }

    function f() {
        SEQ.main.isRunningNode() || (SEQ.contextMenu.cancel(), SEQ.messageCreator.cancel(), SEQ.entryMover.cancel(), e())
    }

    function g() {
        G = null, H = null, x()
    }

    function h(a) {
        a.shiftKey || 13 != a.keyCode || (a.preventDefault(), i())
    }

    function i() {
        var a = I.getElementsByTagName("textarea")[0].value;
        if (document.body.removeChild(I), I = null, G) {
            var b = G.raw, c = /^[\s]*/.exec(b)[0];
            if (G.type == SEQ.entityParticipant.Type.PARTICIPANT) d(G, a); else if (H) d(H, a); else if (SEQ.entityFragment.regExp.exec(G.type)) {
                var e = b.indexOf(" ");
                e > -1 ? G.raw = b.substring(0, b.indexOf(" ") + 1) + a.replace(/\n/g, "\\n") : G.raw = b + " " + a.replace(/\n/g, "\\n"), n()
            } else SEQ.entityDivider.Type.DIVIDER === G.type ? (G.raw = SEQ.entityDivider.build(a.replace(/\n/g, "\\n")), n()) : SEQ.entityFrame.isType(G.type) ? (G.raw = G.build(a, c), n()) : (G.raw = b.substring(0, b.indexOf(":") + 1) + a.replace(/\n/g, "\\n"), n())
        } else F && (F.text = a, o(F))
    }

    function j(a) {
        if (!SEQ.parser.parsingState.ongoing) {
            var b = a.target.tagName;
            27 == a.keyCode && f(), D() || (46 == a.keyCode ? G && l(a, G) : 187 == a.keyCode || 171 == a.keyCode || 107 == a.keyCode ? "TEXTAREA" != b && "INPUT" != b && k(.1) : 189 == a.keyCode || 173 == a.keyCode || 109 == a.keyCode ? "TEXTAREA" != b && "INPUT" != b && k(-.1) : 90 == a.keyCode && (a.ctrlKey || a.metaKey) && a.shiftKey ? (a.preventDefault(), SEQ.main.redoChange()) : 90 == a.keyCode && (a.ctrlKey || a.metaKey) ? (a.preventDefault(), SEQ.main.undoChange()) : 89 == a.keyCode && (a.ctrlKey || a.metaKey) ? (a.preventDefault(), SEQ.main.redoChange()) : 83 == a.keyCode && (a.ctrlKey || a.metaKey) ? (a.preventDefault(), SEQ.menu.isDefaultSaveLocationLocalStorage() ? SEQ.saveAndOpen.saveSourceIntoLocalStorage(!0) : SEQ.saveAndOpen.saveSourceIntoFile(!0)) : 77 == a.keyCode && (a.ctrlKey || a.metaKey) && (a.preventDefault(), SEQ.menu.togglePresentationMode()))
        }
    }

    function k(a) {
        for (var b = !1, c = SEQ.parser.diagram.entries, d = "", e = 0; e < c.length; e++) {
            var f = c[e];
            null != f.entrySpacing && (b = !0, f.raw = SEQ.entityEntrySpacing.build(f.entrySpacing + a)), !b && f.type && f.type != SEQ.entityParticipant.Type.PARTICIPANT && f.type != SEQ.entityTitle.Type.TITLE && (d += SEQ.entityEntrySpacing.build(SEQ.metrics.constants.entrySpacingRatio + a) + "\n", b = !0), d = B(e, c, d, f.raw)
        }
        SEQ.main.updateSource(d), SEQ.parser.parse()
    }

    function l(a, b) {
        if (!I) {
            a.preventDefault();
            var c, d = SEQ.parser.diagram.entries;
            c = SEQ.entityParticipant.isType(b.type) ? function (a, b) {
                return a.name === b.fromParticipantName || a.name === b.toParticipantName
            } : SEQ.entityFragment.isType(b.type) && SEQ.entityFragment.Type.ELSE != b.type ? b.fragment.type === SEQ.entityFragment.Type.EXPANDABLE_PLUS ? function (a, b) {
                return a.fragment == b.fragment || a.fragment == b.enclosingCollapsedFragment
            } : function (a, b) {
                return a.fragment == b.fragment
            } : function (a, b) {
                return a === b
            };
            for (var e = "", f = 0; f < d.length; f++) {
                var g = d[f];
                c(b, g) || (e = B(f, d, e, g.raw))
            }
            SEQ.main.updateSource(e), SEQ.parser.parse()
        }
    }

    function m() {
        var a = SEQ.parser.diagram.entries, b = !1, c = "";
        J++;
        for (var d = "participant ChangeMe" + J, e = 0; e < a.length; e++) {
            var f = a[e];
            SEQ.entityTitle.isType(f.type) || SEQ.entityParticipant.isType(f.type) || b || (c += d + "\n", b = !0), c = B(e, a, c, f.raw)
        }
        b || (c += "\n" + d), SEQ.main.updateSource(c), SEQ.parser.parse()
    }

    function n() {
        for (var a = SEQ.parser.diagram.entries, b = "", c = 0; c < a.length; c++) {
            var d = a[c];
            b = B(c, a, b, d.raw)
        }
        SEQ.main.updateSource(b), SEQ.parser.parse()
    }

    function o(a) {
        function b() {
            return SEQ.entityMessage.regExpArrow.exec(a.type) ? SEQ.entityMessage.build(a.type, a.fromParticipantName, a.toParticipantName, a.text) : SEQ.entityNoteBoxLeftRight.isType(a.type) ? a.notePosition === SEQ.entityNoteBoxOver.NotePosition.OVER ? SEQ.entityNoteBoxOver.build(a.type, a.participants, a.text) : SEQ.entityNoteBoxLeftRight.build(a.type, a.notePosition, a.participants, a.text) : SEQ.entityDivider.isType(a.type) ? SEQ.entityDivider.build(a.text) : SEQ.entityFragment.isType(a.type) ? SEQ.entityFragment.build(a.type, a.text) : SEQ.entityActivation.isType(a.type) ? SEQ.entityActivation.build(a.type, a.participants) : SEQ.entitySpace.isType(a.type) ? SEQ.entitySpace.build(a.type) : void 0
        }

        for (var c = SEQ.parser.diagram.entries, d = !1, e = "", f = 0; f < c.length; f++) {
            var g = c[f];
            !d && g.type && a.posY < g.position.posY && (e += b() + "\n", d = !0), e = B(f, c, e, g.raw)
        }
        d || (e += "\n" + b()), a = null, SEQ.main.updateSource(e), SEQ.parser.parse()
    }

    function p(a) {
        I || L || (SEQ.messageCreator.finishMessage(a), SEQ.entryMover.finishMove(a)), z(a)
    }

    function q(a) {
        function c(a) {
            return a.buttons ? 1 != a.buttons : !!a.which && 1 != a.which
        }

        if (D() && i(), L = c(a), !I && !L) {
            SEQ.main.blurEditor();
            var d = (new Date).getTime();
            if (d - K < 400) {
                var e, f = b(a);
                e = r(f) ? SEQ.entityParticipant.findParticipantXCollision(f.x, f.y, !1) : v(f.x, f.y), G == e ? t(a) : (K = d, s(a))
            } else K = d, s(a);
            a.preventDefault()
        }
    }

    function r(a) {
        var b = E(), c = b + SEQ.metrics.data.participantMarginTop + SEQ.parser.diagram.maxParticipantGroupHeight;
        return a.y > c && a.y < c + SEQ.parser.diagram.participantMaxHeight
    }

    function s(a) {
        f();
        var c = SEQ.main.getInteractionContext();
        c.save(), c.fillStyle = "#ff0000", c.strokeStyle = "#ff0000";
        var d, e = b(a), g = SEQ.parser.diagram.collisionTypeAreas.search({minX: e.x, maxX: e.x, minY: e.y, maxY: e.y});
        if (g.forEach(function (a) {
            a.link && (d = a.link)
        }), d) window.open(d); else if (r(e)) {
            var h = SEQ.entityParticipant.findParticipantXCollision(e.x, e.y, !1);
            h && (G = h, SEQ.entityParticipant.paint(h, c, !1, !0), G.entry && u(G.entry))
        } else {
            var i = v(e.x, e.y);
            if (i) i.paint(i, c, !0, !1, SEQ.painter.getCanvasSize()), u(i), G = i, i.updatePos && SEQ.entryMover.startMove(a, i); else {
                var j = SEQ.entityParticipant.findParticipantXCollision(e.x, e.y, !0);
                j && SEQ.messageCreator.startMessage(a, j)
            }
        }
        c.restore()
    }

    function t(a) {
        if (a.preventDefault(), G) if (G.type == SEQ.entityParticipant.Type.PARTICIPANT) c(a, G.name); else if (SEQ.entityFragment.regExp.exec(G.type)) SEQ.entityFragment.Type.END != G.type && (G.elseGuard ? c(a, G.elseGuard.text) : c(a, G.fragment.text)); else if (H) c(a, H.name); else if (G.textData) {
            var b = SEQ.textUtil.buildInputBoxText(G.textData);
            c(a, b)
        } else G.text && c(a, G.text)
    }

    function u(a) {
        var b, c = SEQ.parser.diagram.entries, d = c.indexOf(a), e = /^[\s]*/.exec(a.raw)[0].length;
        if (SEQ.entityDivider.isType(a.type)) b = {
            start: a.raw.indexOf("==") + 2,
            end: a.raw.length - 2
        }; else if (SEQ.entityFragment.isType(a.type)) b = {
            start: a.type.length + e + 1,
            end: a.raw.length
        }; else if (SEQ.entityParticipant.isType(a.type)) if (a.longName) {
            var f = a.raw.indexOf('"') + 1, g = a.raw.indexOf('"', f);
            b = {start: f, end: g}
        } else b = {start: 0, end: 0}; else if (SEQ.entityFrame.isType(a.type)) b = {
            start: a.type.length + e + 1,
            end: a.raw.length
        }; else {
            var h = a.raw.indexOf(":");
            b = h > -1 ? {start: h + 1, end: a.raw.length} : {start: 0, end: a.raw.length}
        }
        SEQ.main.selectInSource(d, b.start, b.end), SEQ.main.focusEditor()
    }

    function v(a, b) {
        function c(c) {
            return b < c.startY && b > c.endY && a > c.startX && a < c.endX
        }

        for (var d = SEQ.parser.diagram, e = d.entries, f = 0; f < e.length; f++) {
            var g = e[f];
            if (!g.enclosingCollapsedFragment) {
                var h;
                if (g.collision && (h = g.collision(g, a, b)), h) {
                    if (h === SEQ.entityFragment.CollisionType.TOGGLE) return void w(g);
                    if (h.participantToCreate && c(h.participantToCreate) && (H = g.participantToCreate), h.main && c(h.main) || h.participantToCreate && c(h.participantToCreate)) return g
                }
            }
        }
    }

    function w(a) {
        for (var b = SEQ.parser.diagram.entries, c = "", d = 0; d < b.length; d++) {
            var e = b[d];
            if (e === a) {
                var f;
                f = e.raw.indexOf(SEQ.entityFragment.Type.EXPANDABLE_PLUS) > -1 ? e.raw.replace(SEQ.entityFragment.Type.EXPANDABLE_PLUS, SEQ.entityFragment.Type.EXPANDABLE_MINUS) : e.raw.indexOf(SEQ.entityFragment.Type.EXPANDABLE_MINUS) > -1 ? e.raw.replace(SEQ.entityFragment.Type.EXPANDABLE_MINUS, SEQ.entityFragment.Type.EXPANDABLE_PLUS) : e.raw.replace(SEQ.entityFragment.Type.EXPANDABLE_DASH, SEQ.entityFragment.Type.EXPANDABLE_PLUS), c = B(d, b, c, f)
            } else c = B(d, b, c, e.raw)
        }
        SEQ.main.updateSource(c), SEQ.parser.parse()
    }

    function x() {
        var a = SEQ.main.getInteractionContext();
        return a.clearRect(0, 0, a.canvas.width, a.canvas.height), a
    }

    function y(a) {
        I || L || (SEQ.messageCreator.paintMessage(a), SEQ.entryMover.continueMove(a)), z(a)
    }

    function z(a) {
        if (!a.buttons && SEQ.parser && SEQ.parser.diagram.collisionTypeAreas) {
            var b = SEQ.interactor.getMousePosInCanvas(a),
                c = SEQ.parser.diagram.collisionTypeAreas.search({minX: b.x, maxX: b.x, minY: b.y, maxY: b.y}),
                d = SEQ.main.getInteractionCanvas().style;
            if (c.length) {
                var e;
                c.forEach(function (a) {
                    "pointer" === a.type && (e = a.type)
                }), e ? d.cursor = e : d.cursor = c[0].type
            } else "auto" != d.cursor && (d.cursor = "auto")
        }
    }

    function A(a) {
        var b = a.target;
        document.getElementById("interactionCanvas").contains(b) || (D() ? I.contains(b) || i() : g());
        for (var c = document.getElementsByClassName("openSaveMenu"), d = !1, e = 0; e < c.length; e++) c[e].contains(b) && (d = !0);
        d || SEQ.saveAndOpen.cancel();
        var h = document.getElementById("contextMenu");
        h && !h.contains(b) && f()
    }

    function B(a, b, c, d) {
        return c += a === b.length - 1 ? d : d + "\n"
    }

    function C() {
        var a;
        a = "none" == document.getElementById("top").style.display ? 5 : 79;
        var b = 0;
        b += E(), b += SEQ.parser.diagram.maxParticipantGroupHeight;
        var c = SEQ.main.getParticipantCanvas();
        window.pageYOffset > b && SEQ.menu.isParticipantOverlay() ? c.style.display = "block" : c.style.display = "none", c.style.top = window.pageYOffset + a + "px"
    }

    function D() {
        return null != I
    }

    function E() {
        var a = SEQ.parser.diagram.frame ? SEQ.parser.diagram.frame.totalHeight : 0,
            b = SEQ.parser.diagram.title ? SEQ.parser.diagram.title.totalHeight : 0;
        return a + b
    }

    var F, G, H, I, J = 0, K = 0, L = !1;
    return {
        init: function () {
            var a = SEQ.main.getInteractionCanvas();
            a.addEventListener("mouseup", p, !1), a.addEventListener("mousedown", q, !1), a.addEventListener("mousemove", y, !1), document.onkeydown = j, document.body.onmousedown = A, window.onscroll = C
        },
        prependParticipant: m,
        cancelAllInteraction: f,
        editEntryTextAreaActive: D,
        getMousePosInCanvas: b,
        displayInputBox: c,
        setNewEntryData: a,
        createEntry: o,
        clearInteractionContext: x,
        onWindowScroll: C
    }
}();
var SEQ = SEQ || {};
SEQ.contextMenu = function () {
    function a(a) {
        if (!SEQ.interactor.editEntryTextAreaActive()) {
            SEQ.interactor.cancelAllInteraction(!0);
            var f = SEQ.interactor.getMousePosInCanvas(a),
                j = SEQ.entityParticipant.findParticipantXCollision(f.x, f.y, !1);
            i = {
                event: a,
                posY: f.y
            }, h = document.createElement("div"), h.id = "contextMenu", document.body.appendChild(h);
            var k = document.createElement("ul");
            k.className = "contextMenuPart", k.style.width = "160px", k.style.top = Math.ceil(a.pageY) + 2 + "px", k.style.left = Math.ceil(a.pageX) + 2 + "px", k.onmouseup = g, h.appendChild(k), j && (e(k, "note", b(SEQ.entityNoteBoxOver.Type.NOTE, j)), e(k, "box", b(SEQ.entityNoteBoxOver.Type.BOX, j)), e(k, "round box", b(SEQ.entityNoteBoxOver.Type.RBOX, j)), e(k, "angular box", b(SEQ.entityNoteBoxOver.Type.ABOX, j)), e(k, "reference", b(SEQ.entityNoteBoxOver.Type.REF, j)), e(k, "activation", d(j))), e(k, "fragment", c(f)), e(k, "divider", null, SEQ.entityDivider.Type.DIVIDER), e(k, "space", null, SEQ.entitySpace.Type.SPACE)
        }
        return a.preventDefault(), !1
    }

    function b(a, b) {
        var c = document.createElement("ul");
        c.className = "contextMenuPart contextSubMenuPart", a !== SEQ.entityNoteBoxOver.Type.REF && (f(c, a, SEQ.entityNoteBoxLeftRight.NotePosition.LEFT, b.name), f(c, a, SEQ.entityNoteBoxLeftRight.NotePosition.RIGHT, b.name)), f(c, a, SEQ.entityNoteBoxOver.NotePosition.OVER, b.name);
        var d = SEQ.parser.diagram.participants;
        return d.forEach(function (d) {
            d.name !== b.name && f(c, a, SEQ.entityNoteBoxOver.NotePosition.OVER, b.name + "," + d.name)
        }), h.appendChild(c), c
    }

    function c(a) {
        var b = document.createElement("ul");
        return b.className = "contextMenuPart contextSubMenuPart", f(b, SEQ.entityFragment.Type.ALT), SEQ.entityFragment.insideFragmentType(a, SEQ.entityFragment.Type.ALT) && f(b, SEQ.entityFragment.Type.ELSE), f(b, SEQ.entityFragment.Type.OPT), f(b, SEQ.entityFragment.Type.LOOP), f(b, SEQ.entityFragment.Type.PAR), SEQ.entityFragment.insideFragmentType(a, SEQ.entityFragment.Type.PAR) && f(b, SEQ.entityFragment.Type.THREAD), f(b, SEQ.entityFragment.Type.GROUP), f(b, SEQ.entityFragment.Type.EXPANDABLE_MINUS), f(b, SEQ.entityFragment.Type.ASSERT), f(b, SEQ.entityFragment.Type.BREAK), f(b, SEQ.entityFragment.Type.CONSIDER), f(b, SEQ.entityFragment.Type.CRITICAL), f(b, SEQ.entityFragment.Type.IGNORE), f(b, SEQ.entityFragment.Type.NEG), f(b, SEQ.entityFragment.Type.SEQ), f(b, SEQ.entityFragment.Type.STRICT), h.appendChild(b), b
    }

    function d(a) {
        var b = document.createElement("ul");
        return b.className = "contextMenuPart contextSubMenuPart", f(b, SEQ.entityActivation.Type.ACTIVATE, null, a.name), f(b, SEQ.entityActivation.Type.DEACTIVATE, null, a.name), f(b, SEQ.entityActivation.Type.DEACTIVATE_AFTER, null, a.name), h.appendChild(b), b
    }

    function e(a, b, c, d) {
        var e = document.createElement("li");
        a.appendChild(e), e.className = "mainMenuListElement", c ? (e.innerHTML = '<span style="float: right">&gt;</span>' + b, c.style.top = Math.ceil(e.getBoundingClientRect().top + window.pageYOffset) - 2 + "px", c.style.left = Math.ceil(a.getBoundingClientRect().right + window.pageXOffset) - 2 + "px", c.onmouseup = g) : e.innerHTML = b, d && e.setAttribute("data-entry-type", d), e.onmouseover = function () {
            for (var a = document.getElementsByClassName("contextSubMenuPart"), b = 0; b < a.length; b++) a[b].style.display = "none";
            for (var d = document.getElementsByClassName("mainMenuListElement"), f = 0; f < d.length; f++) d[f].style.backgroundColor = "#ffffff";
            e.style.backgroundColor = "#b0dcea", c && (c.style.display = "block")
        }
    }

    function f(a, b, c, d, e) {
        var f = document.createElement("li");
        f.setAttribute("data-entry-type", b), d && f.setAttribute("data-entry-participants", d), c && f.setAttribute("data-entry-note-position", c), e ? f.innerHTML = e : c && d ? f.innerHTML = b + " " + c + " " + d : d ? f.innerHTML = b + " " + d : f.innerHTML = b, a.appendChild(f)
    }

    function g(a) {
        var b = a.target, c = b.getAttribute("data-entry-type"), d = b.getAttribute("data-entry-note-position"),
            e = b.getAttribute("data-entry-participants");
        if (c) {
            document.body.removeChild(h), h = null;
            var f = {participants: e, posY: i.posY, type: c, notePosition: d};
            SEQ.interactor.setNewEntryData(f), SEQ.entityActivation.isType(c) || SEQ.entitySpace.isType(c) ? SEQ.interactor.createEntry(f) : SEQ.interactor.displayInputBox(i.event), i = null
        }
    }

    var h, i;
    return {
        init: function () {
            var b = SEQ.main.getInteractionCanvas();
            b.addEventListener("contextmenu", a, !1)
        }, active: function () {
            return null != h
        }, cancel: function () {
            h && document.body.removeChild(h), i = null, h = null
        }
    }
}();
var SEQ = SEQ || {};
SEQ.messageCreator = function () {
    function a(a, b) {
        var c = SEQ.interactor.getMousePosInCanvas(a);
        e = {shift: a.shiftKey, ctrl: a.ctrlKey, x: c.x, y: c.y, participant: b}
    }

    function b(a) {
        var b = SEQ.interactor.getMousePosInCanvas(a);
        if (e) {
            var c = SEQ.entityParticipant.findParticipantXCollision(e.x, e.y, !1),
                d = SEQ.entityParticipant.findParticipantXCollision(b.x, b.y, !1);
            if (c && d && (Math.abs(b.y - e.y) > SEQ.metrics.data.messageCreatorPosDiffThreshold || Math.abs(b.x - e.x) > SEQ.metrics.data.messageCreatorInteractionMargin && c != d)) {
                var f;
                f = d.posX >= c.posX ? e.shift ? e.ctrl ? SEQ.entityMessage.Type.RESP_FORWARD_ASYNC : SEQ.entityMessage.Type.RESP_FORWARD_SYNC : e.ctrl ? SEQ.entityMessage.Type.REQ_FORWARD_ASYNC : SEQ.entityMessage.Type.REQ_FORWARD_SYNC : e.shift ? e.ctrl ? SEQ.entityMessage.Type.RESP_BACKWARD_ASYNC : SEQ.entityMessage.Type.RESP_BACKWARD_SYNC : e.ctrl ? SEQ.entityMessage.Type.REQ_BACKWARD_ASYNC : SEQ.entityMessage.Type.REQ_BACKWARD_SYNC;
                var g = (e.y + b.y) / 2, h = {fromParticipantName: c.name, toParticipantName: d.name, posY: g, type: f};
                return SEQ.interactor.setNewEntryData(h), SEQ.interactor.displayInputBox(a), !0
            }
            SEQ.interactor.cancelAllInteraction(), e = null
        }
    }

    function c(a) {
        e && (a.preventDefault(), d(a))
    }

    function d(a) {
        var b = SEQ.interactor.clearInteractionContext();
        if (e) {
            var c = SEQ.interactor.getMousePosInCanvas(a);
            b.save(), e.shift && void 0 !== b.setLineDash && b.setLineDash([SEQ.metrics.data.messageLineDashWidth]);
            var d;
            if (Math.abs(e.participant.posX - c.x) < SEQ.metrics.data.messageCreatorInteractionMargin && Math.abs(c.y - e.y) > SEQ.metrics.data.messageCreatorPosDiffThreshold) {
                d = !1, b.beginPath();
                var f = SEQ.metrics.data.messageSelfRefWidth, g = e.participant.posX;
                b.moveTo(e.participant.posX, e.y), b.lineTo(g + f, e.y), b.lineTo(g + f, c.y), b.lineTo(c.x, c.y), b.stroke()
            } else {
                var h = e.participant.posX,
                    i = c.x > e.participant.posX ? -1 * SEQ.metrics.data.messageArrowWidth : SEQ.metrics.data.messageArrowWidth;
                d = e.participant.posX < c.x, b.beginPath(), b.moveTo(h, e.y), b.lineTo(c.x + i, c.y), b.stroke()
            }
            b.restore(), SEQ.entityMessage.paintArrowHead(c.y, d, c.x, b, e.ctrl)
        }
    }

    var e;
    return {
        init: function () {
            var a = SEQ.main.getInteractionCanvas();
            a.addEventListener("contextmenu", onCanvasContextMenu, !1)
        }, cancel: function () {
            e = null
        }, startMessage: a, finishMessage: b, paintMessage: c
    }
}();
var SEQ = SEQ || {};
SEQ.entryMover = function () {
    function a(a) {
        i && (r = 0, s = 0, a.clientY < 50 ? s = -20 : a.clientY > window.innerHeight - 50 && (s = 20), a.clientX < 50 ? r = -20 : a.clientX > window.innerWidth - 50 && (r = 20), 0 != r || 0 != s ? t || (t = !0, u()) : t = !1)
    }

    function b(a, b) {
        if (b.calcPosX) {
            var c = b.calcPosX(b);
            k = c.fromX, l = c.toX
        }
        i = null, o = !1, p = !1, q = !1, j = b;
        var d = SEQ.interactor.getMousePosInCanvas(a);
        b.toParticipantName ? (!b.participantToCreate && Math.abs(d.x - l) < SEQ.metrics.data.entryMoverXCollisionWidth && (p = !0), Math.abs(d.x - k) < SEQ.metrics.data.entryMoverXCollisionWidth && (o = !0), o && p && (Math.abs(d.x - l) > Math.abs(d.x - k) ? (p = !1, o = !0) : (p = !0, o = !1))) : b.notePosition === SEQ.entityNoteBoxOver.NotePosition.OVER ? Math.abs(d.x - k) > b.totalWidth / 2 - 1.5 * SEQ.metrics.data.entryMoverXCollisionWidth ? (l = k, q = !0, d.x > k ? p = !0 : o = !0) : o = !0 : b.fromParticipantName && !b.lockedPosX && (o = !0), m = j.position.posY - d.y, n = d
    }

    function c(a) {
        return Math.abs(n.y - a.y) > SEQ.metrics.data.entryMoverThreshold || Math.abs(n.x - a.x) > SEQ.metrics.data.entryMoverThreshold
    }

    function d() {
        j = null, i = null, o = !1, p = !1, t = !1, r = 0, s = 0, window.removeEventListener("mousemove", a, !1)
    }

    function e(a) {
        var b = SEQ.interactor.getMousePosInCanvas(a);
        if (i && c(b)) {
            var e = i.raw;
            if (o) {
                var g = SEQ.entityParticipant.findParticipantXCollision(b.x, b.y, !0);
                g && (i.notePosition === SEQ.entityNoteBoxOver.NotePosition.OVER && i.toParticipantName === g.name ? (i.fromParticipantName = g.name, i.toParticipantName = null) : i.fromParticipantName = g.name, e = i.buildRaw(i))
            } else if (p) {
                var h = SEQ.entityParticipant.findParticipantXCollision(b.x, b.y, !0);
                h && (i.notePosition === SEQ.entityNoteBoxOver.NotePosition.OVER && i.fromParticipantName === h.name ? (i.fromParticipantName = h.name, i.toParticipantName = null) : i.toParticipantName = h.name, e = i.buildRaw(i))
            }
            for (var k = SEQ.parser.diagram.entries, l = !1, n = "", q = 0; q < k.length; q++) {
                var r = k[q];
                !l && r.type && b.y + m < r.position.posY && (n = f(q, n, e), l = !0, 0 === q && (n += "\n")), r != j && (n = f(q, n, r.raw))
            }
            l || (n += "\n" + e), SEQ.main.updateSource(n), SEQ.parser.parse()
        }
        i && SEQ.interactor.clearInteractionContext(), d()
    }

    function f(a, b, c) {
        return b += 0 === a ? c : "\n" + c
    }

    function g(b) {
        if (b.preventDefault(), j && !i) {
            var d = SEQ.interactor.getMousePosInCanvas(b);
            c(d) && (window.addEventListener("mousemove", a, !1), i = JSON.parse(JSON.stringify(j)), i.paint = j.paint, j.participantToCreate && (i.participantToCreate = j.participantToCreate), i.updatePos = j.updatePos, i.buildRaw = j.buildRaw, q && (i.toParticipantName = i.fromParticipantName))
        } else i && h(b)
    }

    function h(a) {
        var b = SEQ.interactor.clearInteractionContext();
        if (i) {
            var c = SEQ.interactor.getMousePosInCanvas(a);
            b.save(), b.globalAlpha = .5, o ? i.updatePos(i, c.y + m, c.x, l) : p ? i.updatePos(i, c.y + m, k, c.x) : i.updatePos(i, c.y + m, k, l), i.paint(i, b, !1, !0, SEQ.painter.getCanvasSize()), b.restore()
        }
    }

    var i, j, k, l, m, n, o, p, q, r, s, t = !1, u = function () {
        0 == r && 0 == s || !i || (window.scrollBy(r, s), setTimeout(u, 40))
    };
    return {
        cancel: function () {
            d()
        }, startMove: b, finishMove: e, continueMove: g
    }
}();
var SEQ = SEQ || {};
SEQ.textUtil = function () {
    function a(a, b) {
        for (var c = a.replace(/\\\\(n|r|t)/g, "\0$1\0"), e = c.split("\\n"), f = 0; f < e.length; f++) e[f] = e[f].replace(/\x00(n|r|t)\x00/g, "\\\\$1");
        var g = 0, h = 0, j = !1, s = !1, t = [], u = "black", v = !1, w = null, x = null, y = [];
        e.forEach(function (a) {
            var b = 0;
            a = a.replace(/\\(\+|\-|\/|\*|\")/g, "=-=ssss=-=$1=-=eeee=-=");
            var c,
                e = a.split(/(\*\*|\/\/|\+\+|\-\-|\"\"|<(?:color|link|align|size)(?:\s|:)[^>]+>|<\/(?:color|link|align|size)>)/),
                f = [], i = 0;
            e.forEach(function (a) {
                var g;
                if ("" === a && e.length > 1) ; else if ("**" === a) j = !j; else if ("//" !== a || c && (c.indexOf("http:") > -1 || c.indexOf("https:") > -1 || c.indexOf("ftp:") > -1 || c.indexOf("gopher:") > -1 || c.indexOf("file:") > -1)) if ("--" === a) t[t.length - 1] === m.small ? t.pop() : t.push(m.small); else if ("++" === a) t[t.length - 1] === m.big ? t.pop() : t.push(m.big); else if ('""' === a) v = v === !1; else if ((g = n.exec(a)) && g.length > 0) {
                    var h = o.exec(g[1]);
                    h && (h[1] ? u = h[1] : h[2] && (u = h[2]))
                } else if ("</color>" === a) u = "black"; else if ((g = p.exec(a)) && g.length > 0) w = g[1]; else if ("</link>" === a) w = null; else if ((g = q.exec(a)) && g.length > 0) x = g[1]; else if ("</align>" === a) x = null; else if ((g = r.exec(a)) && g.length > 0) t.push(g[1]); else if ("</size>" === a) t.pop(); else {
                    var y, z, A = t[t.length - 1];
                    if (m.small == A) y = v ? SEQ.main.getFontMonoSmall() : SEQ.main.getFontSmall(), z = SEQ.main.getLineHeightFontSmall(); else if (m.big == A) y = v ? SEQ.main.getFontMonoBig() : SEQ.main.getFontBig(), z = SEQ.main.getLineHeightFontBig(); else if (A) {
                        var B = parseFloat(A);
                        y = v ? SEQ.main.getFontMonoNumeric(B) : SEQ.main.getFontNumeric(B), z = SEQ.main.getLineHeightFontNumeric(B)
                    } else y = v ? SEQ.main.getFontMonoNormal() : SEQ.main.getFontNormal(), z = SEQ.metrics.data.textLineHeight;
                    j && (y = k + y), s && (y = l + y), a = a.replace(/=-=ssss=-=(.)=-=eeee=-=/g, "$1");
                    var C = SEQ.metrics.calcWidth(d(a), y);
                    b += C, f.push({
                        part: a,
                        font: y,
                        color: u,
                        width: C,
                        height: z,
                        link: w,
                        align: x
                    }), z > i && (i = z)
                } else s = !s;
                c = a
            }), h += i, y.push({partsWithFonts: f, lineMaxHeight: i, lineWidth: b}), b > g && (g = b)
        });
        var z;
        return b && (z = SEQ.metrics.calcWidth(b + " ", "bold " + SEQ.main.getFontNormal()), g += z), {
            parsedLines: y,
            lines: e,
            width: g,
            height: h + y[y.length - 1].lineMaxHeight * i,
            autoNumberWidth: z
        }
    }

    function b(a, b, d, e, g, h, i, j) {
        a.save(), j && c(a, d, e, g, h, i, j), f(a, b, d, e, g, h, i), a.restore()
    }

    function c(a, b, c, d, e, f, g) {
        var h = d, j = !0;
        b.forEach(function (d) {
            var k, l;
            j && e && f ? (c += f, k = c - f - SEQ.metrics.data.textBackgroundPadding, l = d.lineWidth + 2 * SEQ.metrics.data.textBackgroundPadding + f, j = !1) : (k = c - SEQ.metrics.data.textBackgroundPadding, l = d.lineWidth + 2 * SEQ.metrics.data.textBackgroundPadding), a.save(), a.fillStyle = g, a.fillRect(k, h, l, d.lineMaxHeight + b[b.length - 1].lineMaxHeight * i), a.restore(), h += d.lineMaxHeight
        })
    }

    function d(a) {
        return a.replace(/\\\\n/g, "\\n").replace(/\\\\r/g, "\\r").replace(/\\\\t/g, "\\t")
    }

    function e(a, b, c, e, f) {
        var g = f;
        c.forEach(function (c) {
            var f = c.partsWithFonts;
            g += c.lineMaxHeight;
            var h = 0;
            f.forEach(function (b) {
                a.font = b.font, h += b.width
            });
            var i = e - h / 2;
            f.forEach(function (e) {
                if (a.font = e.font, e.link) {
                    a.__fontHref = e.link, a.beginPath();
                    var f = g + a.lineWidth;
                    a.moveTo(i, f), a.lineTo(i + e.width, f), a.stroke(), SEQ.parser.diagram.collisionTypeAreas && SEQ.parser.diagram.collisionTypeAreas.insert({
                        minX: i,
                        maxX: i + e.width,
                        minY: g - .7 * c.lineMaxHeight,
                        maxY: g,
                        type: "pointer",
                        link: e.link
                    })
                }
                b || (a.fillStyle = e.color);
                var h = d(e.part);
                a.fillText(h, i, g), i += e.width
            })
        })
    }

    function f(a, b, c, e, f, g, h) {
        g && h && (e += h);
        var i = f - c[0].lineMaxHeight * j, k = 0;
        c.forEach(function (b) {
            var c = 0;
            b.partsWithFonts.forEach(function (b) {
                a.font = b.font, c += b.width
            }), c > k && (k = c)
        });
        var l = !0;
        c.forEach(function (c) {
            var f = c.partsWithFonts, j = null;
            f.length > 0 && f[0].align === f[f.length - 1].align && (j = f[0].align);
            var m = 0;
            f.forEach(function (b) {
                a.font = b.font, m += b.width
            }), i += c.lineMaxHeight;
            var n;
            if (n = "center" === j ? e + k / 2 - m / 2 : "right" === j ? e + k - m : e, f.forEach(function (e) {
                if (a.font = e.font, e.link) {
                    a.__fontHref = e.link, a.beginPath();
                    var f = i + a.lineWidth;
                    a.moveTo(n, f), a.lineTo(n + e.width, f), a.stroke(), SEQ.parser.diagram.collisionTypeAreas && SEQ.parser.diagram.collisionTypeAreas.insert({
                        minX: n,
                        maxX: n + e.width,
                        minY: i - .7 * c.lineMaxHeight,
                        maxY: i,
                        type: "pointer",
                        link: e.link
                    })
                }
                b || (a.fillStyle = e.color);
                var g = d(e.part);
                a.fillText(g, n, i), n += e.width
            }), g && l) {
                a.save(), a.font = "bold " + SEQ.main.getFontNormal();
                var o = g + " ";
                a.fillText(o, e - h, i), a.restore(), l = !1
            }
        })
    }

    function g(a) {
        var b = "", c = 0;
        return a.lines.forEach(function (d) {
            b += d, c < a.lines.length - 1 && (b += "\\n"), c++
        }), b
    }

    function h(a) {
        var b = "", c = 0;
        return a.lines.forEach(function (d) {
            b += d, c < a.lines.length - 1 && (b += "\n"), c++
        }), b
    }

    var i = .3, j = .1, k = "bold ", l = "italic ", m = {normal: "normal", small: "small", big: "big"},
        n = new RegExp("<color(?:\\s|:)(.+)>"), o = new RegExp("(?:\\s?(#[a-fA-F0-9]{6})|(?:\\s?#)([a-zA-Z]{3,20}))"),
        p = new RegExp("<link(?:\\s|:)(.+)>"), q = new RegExp("<align(?:\\s|:)(left|right|center)>"),
        r = new RegExp("<size(?:\\s|:)([0-9]+)>");
    return {parseTextData: a, buildInputBoxText: h, buildSourceText: g, fillText: b, fillTextParticipant: e}
}();
var SEQ = SEQ || {};
SEQ.participantTypes = function () {
    function a(a, b, c, d, e, f, g, h) {
        for (var i = g; i < h; i += .01) {
            var j = b - e * Math.sin(i) * Math.sin(f) + d * Math.cos(i) * Math.cos(f),
                k = c + d * Math.cos(i) * Math.sin(f) + e * Math.sin(i) * Math.cos(f);
            0 == i ? a.moveTo(j, k) : a.lineTo(j, k)
        }
    }

    function b(a, b) {
        a.color ? b.fillStyle = a.color : b.fillStyle = "white", b.fill()
    }

    function c() {
        return 3.14 * SEQ.metrics.data.baseSpaceMetric - SEQ.metrics.data.participantTypeLineWeight
    }

    return {
        fontawesome: {
            paint: function (a, b, c, d) {
                var e = b.longNameTextData ? b.longNameTextData.height : SEQ.metrics.data.textLineHeight + SEQ.metrics.data.textTopBottomPadding,
                    f = c + d - e - SEQ.metrics.data.baseSpaceMetric / 3;
                a.save(), a.font = SEQ.main.getFontFontAwesome();
                var g = SEQ.metrics.calcWidth(b.iconUnicode, SEQ.main.getFontFontAwesome());
                b.color && (a.fillStyle = b.color), a.fillText(b.iconUnicode, b.posX - g / 2, f), a.restore()
            }, width: function (a) {
                return SEQ.metrics.calcWidth(a, SEQ.main.getFontFontAwesome())
            }, height: function (a) {
                return SEQ.metrics.calcHeight(SEQ.main.getFontFontAwesome(), a, SEQ.main.getFontIconSize())
            }
        }, materialdesignicons: {
            paint: function (a, b, c, d) {
                var e = b.longNameTextData ? b.longNameTextData.height : SEQ.metrics.data.textLineHeight + SEQ.metrics.data.textTopBottomPadding,
                    f = c + d - e;
                a.save(), a.font = SEQ.main.getFontMaterialDesignIcons();
                var g = SEQ.metrics.calcWidth(b.iconUnicode, SEQ.main.getFontFontAwesome());
                b.color && (a.fillStyle = b.color), a.fillText(b.iconUnicode, b.posX - g / 2, f), a.restore()
            }, width: function (a) {
                return SEQ.metrics.calcWidth(a, SEQ.main.getFontMaterialDesignIcons())
            }, height: function (a) {
                var b = SEQ.metrics.calcHeight(SEQ.main.getFontMaterialDesignIcons(), a, SEQ.main.getFontIconSize());
                return b
            }
        }, actor: {
            paint: function (a, c, d, e) {
                var f = c.longNameTextData ? c.longNameTextData.height : SEQ.metrics.data.textLineHeight + SEQ.metrics.data.textTopBottomPadding,
                    g = SEQ.metrics.data.baseSpaceMetric, h = d + e - f, i = 3.5 * g, j = .57 * g, k = 1.22 * g,
                    l = .72 * g, m = .44 * g + 2 * j;
                a.save(), a.lineWidth = SEQ.metrics.data.participantTypeLineWeight, a.beginPath(), a.arc(c.posX, h - i + j, j, 0, 2 * Math.PI), a.moveTo(c.posX, h - i + 2 * j), a.lineTo(c.posX, h - i + 2 * j + k), a.moveTo(c.posX - l, h - i + m), a.lineTo(c.posX + l, h - i + m), a.moveTo(c.posX, h - i + 2 * j + k), a.lineTo(c.posX - l, h), a.moveTo(c.posX, h - i + 2 * j + k), a.lineTo(c.posX + l, h), b(c, a), a.stroke(), a.restore()
            }, width: function () {
                return .72 * SEQ.metrics.data.baseSpaceMetric * 2
            }, height: function () {
                return 3.5 * SEQ.metrics.data.baseSpaceMetric + SEQ.metrics.data.participantTypeLineWeight / 2
            }
        }, boundary: {
            paint: function (a, d, e, f) {
                var g = d.longNameTextData ? d.longNameTextData.height : SEQ.metrics.data.textLineHeight + SEQ.metrics.data.textTopBottomPadding,
                    h = c(), i = f + e - g - h / 2 - SEQ.metrics.data.participantTypeLineWeight / 2, j = h / 2,
                    k = SEQ.metrics.data.baseSpaceMetric / 2;
                a.save(), a.lineWidth = SEQ.metrics.data.participantTypeLineWeight, a.beginPath(), a.arc(d.posX + k, i, j, 0, 2 * Math.PI), a.moveTo(d.posX - j - k + SEQ.metrics.data.participantTypeLineWeight / 2, i - j - SEQ.metrics.data.participantTypeLineWeight / 2), a.lineTo(d.posX - j - k + SEQ.metrics.data.participantTypeLineWeight / 2, i + j + SEQ.metrics.data.participantTypeLineWeight / 2), a.moveTo(d.posX - j - k, i), a.lineTo(d.posX - j + k, i), b(d, a), a.stroke(), a.restore()
            }, width: function () {
                return c() + SEQ.metrics.data.baseSpaceMetric / 2 + SEQ.metrics.data.participantTypeLineWeight
            }, height: function () {
                return c() + SEQ.metrics.data.participantTypeLineWeight
            }
        }, control: {
            paint: function (a, d, e, f) {
                var g = d.longNameTextData ? d.longNameTextData.height : SEQ.metrics.data.textLineHeight + SEQ.metrics.data.textTopBottomPadding,
                    h = c(), i = f + e - g - h / 2 - SEQ.metrics.data.participantTypeLineWeight / 2, j = h / 2,
                    k = .6 * SEQ.metrics.data.baseSpaceMetric, l = SEQ.metrics.data.baseSpaceMetric / 2,
                    m = d.posX - .2 * SEQ.metrics.data.baseSpaceMetric;
                a.save(), a.lineWidth = SEQ.metrics.data.participantTypeLineWeight, a.beginPath(), a.arc(d.posX, i, j, 0, 2 * Math.PI), a.moveTo(m, i - j), a.lineTo(m + k, i - j - l), a.moveTo(m, i - j), a.lineTo(m + k, i - j + l), b(d, a), a.stroke(), a.restore()
            }, width: function () {
                return c() + SEQ.metrics.data.participantTypeLineWeight
            }, height: function () {
                return c() + SEQ.metrics.data.participantTypeLineWeight + SEQ.metrics.data.baseSpaceMetric / 2
            }
        }, entity: {
            paint: function (a, d, e, f) {
                var g = d.longNameTextData ? d.longNameTextData.height : SEQ.metrics.data.textLineHeight + SEQ.metrics.data.textTopBottomPadding,
                    h = c(), i = f + e - g - h / 2 - SEQ.metrics.data.participantTypeLineWeight / 2, j = h / 2;
                a.save(), a.lineWidth = SEQ.metrics.data.participantTypeLineWeight, a.beginPath(), a.arc(d.posX, i - .8 * SEQ.metrics.data.participantTypeLineWeight, j, 0, 2 * Math.PI), a.moveTo(d.posX - j - SEQ.metrics.data.participantTypeLineWeight / 2, i + j), a.lineTo(d.posX + j - SEQ.metrics.data.participantTypeLineWeight / 2, i + j), b(d, a), a.stroke(), a.restore()
            }, width: function () {
                return c() + SEQ.metrics.data.participantTypeLineWeight
            }, height: function () {
                return c() + 1.8 * SEQ.metrics.data.participantTypeLineWeight
            }
        }, database: {
            paint: function (c, d, e, f) {
                var g = d.longNameTextData ? d.longNameTextData.height : SEQ.metrics.data.textLineHeight + SEQ.metrics.data.textTopBottomPadding,
                    h = SEQ.metrics.data.baseSpaceMetric, i = e + f - g, j = 3.42 * h, k = .66 * h, l = 2.92 * h,
                    m = 1.46 * h, n = .073 * h;
                c.save(), c.lineWidth = SEQ.metrics.data.participantTypeLineWeight, c.beginPath(), c.moveTo(d.posX - l / 2, i - k), c.lineTo(d.posX - l / 2, i - j + k), c.lineTo(d.posX + l / 2, i - j + k), c.lineTo(d.posX + l / 2, i - k), b(d, c), c.stroke(), c.beginPath(), a(c, d.posX, i - j + k - n, m, k, 0, 0, 2 * Math.PI), a(c, d.posX, i - k - n, m, k, 0, 0, Math.PI), b(d, c), c.stroke(), c.restore()
            }, width: function () {
                return 4 * SEQ.metrics.data.baseSpaceMetric
            }, height: function () {
                return 3.42 * SEQ.metrics.data.baseSpaceMetric + SEQ.metrics.data.participantTypeLineWeight
            }
        }
    }
}();
var SEQ = SEQ || {};
SEQ.saveAndOpen = function () {
    function a() {
        document.getElementById("saveSourceMenu").style.display = "none", document.getElementById("openSourceMenu").style.display = "none"
    }

    function b(b) {
        var c = b.files;
        if (window.File && window.FileReader && window.FileList && window.Blob) {
            var d = c[0], e = new FileReader;
            e.onload = function (c) {
                SEQ.main.updateSource(c.target.result), SEQ.main.parse(), b.form.reset(), a()
            }, e.readAsText(d)
        } else alert("The JavaScript file APIs are not fully supported in this browser.")
    }

    function c(b) {
        var c = this.diagramName;
        if ("delete" === b.target.innerHTML) {
            var d = confirm('Are you sure you want to delete "' + c + '"?');
            d && (localStorage.removeItem(c), j())
        } else {
            var e = localStorage.getItem(c);
            SEQ.main.updateSource(e), SEQ.main.parse(), a()
        }
    }

    function d(a) {
        var b;
        return b = a ? SEQ.main.createDiagramName() + ".txt" : document.getElementById("fileName").value
    }

    function e(b) {
        var c = d(b), e = SEQ.main.getSourceValue();
        navigator.appVersion.indexOf("Win") != -1 && (e = e.replace(/\n/g, "\r\n"));
        var f = new Blob([e], {type: "text/plain"});
        if (navigator.msSaveBlob) navigator.msSaveBlob(f, c); else {
            var g = document.createElement("a");
            g.download = c, g.innerHTML = "download source", g.onclick = function (a) {
                document.body.removeChild(a.target)
            };
            var h = window.URL || window.webkitURL;
            g.href = h.createObjectURL(f), g.style.display = "none", document.body.appendChild(g), g.click()
        }
        a(), SEQ.menu.displayNotification("Source saved to download folder")
    }

    function f() {
        var a = SEQ.main.createDiagramName() + ".png", b = SEQ.main.getDiagramCanvas();
        if (b.msToBlob) {
            var c = b.msToBlob();
            window.navigator.msSaveBlob(c, a)
        } else {
            var d = document.getElementById("pnghq"), e = b.toDataURL("image/png");
            d.download = a, d.href = e
        }
    }

    function g() {
        var a = SEQ.main.createDiagramName() + ".jpg", b = SEQ.main.getDiagramCanvas(),
            c = b.toDataURL("image/jpeg", .1), d = document.getElementById("jpglq");
        if (b.msToBlob) {
            var e = window.open("about:blank");
            e.document.write("<img src='" + c + "'/>")
        } else d.download = a, d.href = c
    }

    function h() {
        var a = SEQ.main.getDiagramCanvas(), b = new C2S(a.width, a.height);
        SEQ.main.setCanvasToSvgContext(b), SEQ.parser.parse();
        var c = b.getSerializedSvg(), d = "data:image/svg+xml;charset=utf-8," + encodeURIComponent(c);
        return SEQ.main.setCanvasToSvgContext(null), SEQ.parser.parse(), d
    }

    function i() {
        var a = SEQ.main.createDiagramName() + ".svg", b = h();
        if (SEQ.main.getDiagramCanvas().msToBlob) window.alert("Please use Chrome or Firefox for svg export"); else {
            var c = document.createElement("a");
            c.onclick = function (a) {
                document.body.removeChild(a.target)
            }, c.href = b, c.download = a, c.style.display = "none", document.body.appendChild(c), c.click()
        }
    }

    function j(a) {
        if (a) {
            var b = a.getBoundingClientRect(), d = document.getElementById("openSourceMenu");
            d.style.top = b.top + "px", d.style.left = b.right + "px", d.style.display = "block"
        }
        for (var e = document.getElementById("localStorageSources"); e.firstChild;) e.removeChild(e.firstChild);
        var f = document.createElement("table");
        e.appendChild(f);
        for (var g = [], h = 0; h < localStorage.length; h++) {
            var i = localStorage.key(h);
            i.indexOf("SEQUENCE_DIAGRAM_ORG_INTERNAL") === -1 && g.push(i)
        }
        if (g.length) g.forEach(function (a) {
            var b = document.createElement("tr");
            b.diagramName = a;
            var d = document.createElement("td");
            d.innerHTML = a + "&nbsp;", b.onclick = c, b.appendChild(d);
            var e = document.createElement("td");
            e.style.textAlign = "right";
            var g = document.createElement("button");
            g.innerHTML = "delete", e.appendChild(g), b.appendChild(e), f.appendChild(b)
        }); else {
            var j = document.createElement("span");
            j.innerHTML = "no diagrams found", e.appendChild(j)
        }
    }

    return {
        saveSource: function (a) {
            var b = a.getBoundingClientRect(), c = document.getElementById("saveSourceMenu");
            c.style.display = "block", c.style.top = b.top + "px", c.style.left = b.right + "px";
            var d = document.getElementById("fileName");
            d.focus(), d.select(), document.getElementById("fileName").value = SEQ.main.createDiagramName() + ".txt"
        }, openSource: j, openSourceFromFile: b, saveSourceIntoFile: e, saveSourceIntoLocalStorage: function (b) {
            var c = d(b);
            localStorage.setItem(c, SEQ.main.getSourceValue()), a(), SEQ.menu.displayNotification("Source saved to local storage")
        }, openSourceFromLocalStorage: c, savePngHq: f, saveJpgLq: g, saveSvg: i, create: function (a) {
            localStorage.setItem(a, SEQ.main.getSourceValue())
        }, cancel: a, paintSvgCanvas: h
    }
}();
var SEQ = SEQ || {};
SEQ.seqDiaHint = function () {
    "use strict";

    function a() {
        b(SEQ.entityNoteBoxOver, e), b(SEQ.entityNoteBoxLeftRight, e), b(SEQ.entityActivation, e), b(SEQ.entityCreateDestroy, e), b(SEQ.entityDivider, f), b(SEQ.entityParticipant, f), b(SEQ.entityParticipantGroup, f), b(SEQ.entityFragment, f), b(SEQ.entityTitle, f), b(SEQ.entityLinear, f), b(SEQ.entityParallel, f), b(SEQ.entityAutoNumber, f), b(SEQ.entityFontFamily, f), b(SEQ.entityFontSize, f), b(SEQ.entitySpace, f), b(SEQ.entityParticipantSpacing, f), b(SEQ.entityEntrySpacing, f), b(SEQ.entityActiveColor, f), b(SEQ.entityLifeLineColor, f), b(SEQ.entityLifeLineWeight, f), b(SEQ.entityFrame, f), b(SEQ.entityMessage, g)
    }

    function b(a, b) {
        if (a.NotePosition) {
            for (var c in a.Type) if (a.Type.hasOwnProperty(c)) for (var d in a.NotePosition) a.NotePosition.hasOwnProperty(d) && b.push(a.Type[c] + " " + a.NotePosition[d])
        } else for (var e in a.Type) if (a.Type.hasOwnProperty(e)) {
            var f = a.Type[e];
            b.includes(f) || b.push(f)
        }
    }

    function c(a) {
        for (var b = 0; b < e.length; b++) {
            var c = e[b];
            if (0 === a.replace(/^\s+/, "").lastIndexOf(c + " ")) return {
                participantPart: a.replace(c, "").trim(),
                start: a.indexOf(c) + c.length + 1
            }
        }
        return !1
    }

    function d(a) {
        var b, d = a.getCursor(), h = a.getLine(d.line).substring(0, d.ch), i = [], j = d.ch, k = j;
        if (a.getLine(d.line).length > d.ch) ; else if (SEQ.entityMessage.regExpArrow.test(h)) {
            for (; k && ">" !== h.charAt(k - 1) && "-" !== h.charAt(k - 1);) k--;
            b = h.slice(k, j).trim(), SEQ.parser.diagram.participants.forEach(function (a) {
                0 === a.name.lastIndexOf(b, 0) && i.push(a.name)
            })
        } else if (SEQ.parser.diagram.participantsByName[h.trim()]) i = g; else {
            for (k = 0; " " === h.charAt(k);) k++;
            if (b = h.replace(/^\s+/, ""), 0 === b.length) SEQ.parser.diagram.participants.forEach(function (a) {
                i.push(a.name)
            }), e.forEach(function (a) {
                i.push(a + " ")
            }), f.forEach(function (a) {
                i.push(a + " ")
            }); else if ("#" === b.charAt(0) || ":" === b.charAt(b.length - 1)) ; else {
                var l = c(h);
                l ? (k = l.start, SEQ.parser.diagram.participants.forEach(function (a) {
                    0 === a.name.lastIndexOf(l.participantPart, 0) && i.push(a.name)
                })) : (SEQ.parser.diagram.participants.forEach(function (a) {
                    0 === a.name.lastIndexOf(b, 0) && i.push(a.name)
                }), e.forEach(function (a) {
                    0 === a.indexOf(b.trim(), 0) && i.push(a + " ")
                }), f.forEach(function (a) {
                    0 === a.indexOf(b.trim(), 0) && i.push(a + " ")
                }))
            }
        }
        return {list: i, from: CodeMirror.Pos(d.line, k), to: CodeMirror.Pos(d.line, j)}
    }

    var e = [], f = [], g = [];
    return {
        init: function () {
            a(), CodeMirror.registerHelper("hint", "seqdiahint", function (a) {
                return d(a)
            })
        }
    }
}();
var SEQ = SEQ || {};
SEQ.seqDiaMode = function () {
    "use strict";

    function a() {
        var a = function (a) {
            for (var b; !b && a.currentGroup < a.maxGroup;) a.currentGroup++, b = a.match[a.currentGroup];
            return b ? (a.pos = a.string.indexOf(b, a.pos) + b.length, a.groupMapping[a.currentGroup].style) : void a.skipToEnd()
        }, b = {};
        b.regExp = SEQ.entityMessage.regExp, b.maxGroup = SEQ.entityMessage.groups.TEXT, b.handleSecondPartOfType = !1, b.groupMapping = {}, b.groupMapping[SEQ.entityMessage.groups.PARTICIPANT_1] = {style: c.ACTOR}, b.groupMapping[SEQ.entityMessage.groups.TYPE] = {style: c.ARROW}, b.groupMapping[SEQ.entityMessage.groups.COLOR_HEX_3] = {style: c.PARAMETER}, b.groupMapping[SEQ.entityMessage.groups.COLOR_NAME_4] = {style: c.PARAMETER}, b.groupMapping[SEQ.entityMessage.groups.COLOR_HEX_7] = {style: c.PARAMETER}, b.groupMapping[SEQ.entityMessage.groups.COLOR_NAME_8] = {style: c.PARAMETER}, b.groupMapping[SEQ.entityMessage.groups.COLOR_HEX_9] = {style: c.PARAMETER}, b.groupMapping[SEQ.entityMessage.groups.COLOR_NAME_10] = {style: c.PARAMETER}, b.groupMapping[SEQ.entityMessage.groups.PARTICIPANT_2] = {style: c.ACTOR}, b.groupMapping[SEQ.entityMessage.groups.TEXT] = {style: c.TEXT}, b.groupMapping[SEQ.entityMessage.groups.DELAY_LEFT] = {style: c.PARAMETER}, b.groupMapping[SEQ.entityMessage.groups.DELAY_RIGHT] = {style: c.PARAMETER}, b.groupMapping[SEQ.entityMessage.groups.COLOR_NAME_10] = {style: c.PARAMETER}, b.progressStream = function (a) {
            if (a.handleSecondPartOfType) return a.pos += a.typeMatchPart.length - a.typeMatchPart.indexOf("#") - a.colorLength, a.handleSecondPartOfType = !1, b.groupMapping[SEQ.entityMessage.groups.TYPE].style;
            for (var c; !c && a.currentGroup < a.maxGroup;) a.currentGroup++, c = a.match[a.currentGroup];
            if (c) {
                var d = a.groupMapping[a.currentGroup];
                if (a.currentGroup === SEQ.entityMessage.groups.TYPE && c.indexOf("#") !== -1) return a.pos += c.indexOf("#"), a.typeMatchPart = c, b.groupMapping[SEQ.entityMessage.groups.TYPE].style;
                if (a.currentGroup === SEQ.entityMessage.groups.COLOR_HEX_3 || a.currentGroup === SEQ.entityMessage.groups.COLOR_NAME_4 || a.currentGroup === SEQ.entityMessage.groups.COLOR_HEX_7 || a.currentGroup === SEQ.entityMessage.groups.COLOR_NAME_8 || a.currentGroup === SEQ.entityMessage.groups.COLOR_HEX_9 || a.currentGroup === SEQ.entityMessage.groups.COLOR_NAME_10) {
                    var e = c.length;
                    return c.indexOf("#") === -1 && (e += 1), a.pos += e, a.colorLength = e, a.handleSecondPartOfType = !0, d.style
                }
                return a.pos = a.string.indexOf(c, a.pos) + c.length, d.style
            }
            a.skipToEnd()
        }, d.push(b);
        var e = {};
        e.regExp = SEQ.entityNoteBoxOver.regExp, e.maxGroup = SEQ.entityNoteBoxOver.groups.TEXT, e.groupMapping = {}, e.groupMapping[SEQ.entityNoteBoxOver.groups.TYPE] = {style: c.KEYWORD}, e.groupMapping[SEQ.entityNoteBoxOver.groups.SIDE] = {style: c.KEYWORD}, e.groupMapping[SEQ.entityNoteBoxOver.groups.PARTICIPANT_FROM] = {style: c.ACTOR}, e.groupMapping[SEQ.entityNoteBoxOver.groups.PARTICIPANT_TO] = {style: c.ACTOR}, e.groupMapping[SEQ.entityNoteBoxOver.groups.COLOR_HEX] = {style: c.PARAMETER}, e.groupMapping[SEQ.entityNoteBoxOver.groups.COLOR_NAME] = {style: c.PARAMETER}, e.groupMapping[SEQ.entityNoteBoxOver.groups.TEXT] = {style: c.TEXT}, e.progressStream = a, d.push(e);
        var f = {};
        f.regExp = SEQ.entityNoteBoxLeftRight.regExp, f.maxGroup = SEQ.entityNoteBoxLeftRight.groups.TEXT, f.groupMapping = {}, f.groupMapping[SEQ.entityNoteBoxLeftRight.groups.TYPE] = {style: c.KEYWORD}, f.groupMapping[SEQ.entityNoteBoxLeftRight.groups.SIDE] = {style: c.KEYWORD}, f.groupMapping[SEQ.entityNoteBoxLeftRight.groups.PARTICIPANT_FROM] = {style: c.ACTOR}, f.groupMapping[SEQ.entityNoteBoxLeftRight.groups.COLOR_HEX] = {style: c.PARAMETER}, f.groupMapping[SEQ.entityNoteBoxLeftRight.groups.COLOR_NAME] = {style: c.PARAMETER}, f.groupMapping[SEQ.entityNoteBoxLeftRight.groups.TEXT] = {style: c.TEXT}, f.progressStream = a, d.push(f);
        var g = {};
        g.regExp = SEQ.entityFragment.regExp, g.maxGroup = SEQ.entityFragment.groups.GROUP_CONDITION_RIGHT_BRACKET, g.groupMapping = {}, g.groupMapping[SEQ.entityFragment.groups.OPERATOR] = {style: c.KEYWORD}, g.groupMapping[SEQ.entityFragment.groups.COLOR_HEX_FRAGMENT] = {style: c.PARAMETER}, g.groupMapping[SEQ.entityFragment.groups.COLOR_NAME_FRAGMENT] = {style: c.PARAMETER}, g.groupMapping[SEQ.entityFragment.groups.COLOR_HEX_LABEL] = {style: c.PARAMETER}, g.groupMapping[SEQ.entityFragment.groups.COLOR_NAME_LABEL] = {style: c.PARAMETER}, g.groupMapping[SEQ.entityFragment.groups.TEXT] = {style: c.TEXT}, g.groupMapping[SEQ.entityFragment.groups.GROUP] = {style: c.KEYWORD}, g.groupMapping[SEQ.entityFragment.groups.COLOR_HEX_FRAGMENT_GROUP] = {style: c.PARAMETER}, g.groupMapping[SEQ.entityFragment.groups.COLOR_NAME_FRAGMENT_GROUP] = {style: c.PARAMETER}, g.groupMapping[SEQ.entityFragment.groups.GROUP_LABEL] = {style: c.TEXT}, g.groupMapping[SEQ.entityFragment.groups.COLOR_HEX_LABEL_GROUP] = {style: c.PARAMETER}, g.groupMapping[SEQ.entityFragment.groups.COLOR_NAME_LABEL_GROUP] = {style: c.PARAMETER}, g.groupMapping[SEQ.entityFragment.groups.GROUP_CONDITION_LEFT_BRACKET] = {style: c.KEYWORD}, g.groupMapping[SEQ.entityFragment.groups.GROUP_CONDITION] = {style: c.TEXT}, g.groupMapping[SEQ.entityFragment.groups.GROUP_CONDITION_RIGHT_BRACKET] = {style: c.KEYWORD}, g.progressStream = a, d.push(g);
        var h = {};
        h.regExp = SEQ.entityActivation.regExp, h.maxGroup = SEQ.entityActivation.groups.COLOR_NAME, h.groupMapping = {}, h.groupMapping[SEQ.entityActivation.groups.TYPE] = {style: c.KEYWORD}, h.groupMapping[SEQ.entityActivation.groups.PARTICIPANT] = {style: c.ACTOR}, h.groupMapping[SEQ.entityActivation.groups.COLOR_HEX] = {style: c.PARAMETER}, h.groupMapping[SEQ.entityActivation.groups.COLOR_NAME] = {style: c.PARAMETER}, h.progressStream = a, d.push(h);
        var i = {};
        i.regExp = SEQ.entityAutoNumber.regExp, i.maxGroup = SEQ.entityAutoNumber.groups.STATUS, i.groupMapping = {}, i.groupMapping[SEQ.entityAutoNumber.groups.AUTO_NUMBER] = {style: c.KEYWORD}, i.groupMapping[SEQ.entityAutoNumber.groups.STATUS] = {style: c.PARAMETER}, i.progressStream = a, d.push(i);
        var j = {};
        j.regExp = SEQ.entityDivider.regExp, j.maxGroup = SEQ.entityDivider.groups.COLOR_NAME, j.groupMapping = {}, j.groupMapping[SEQ.entityDivider.groups.EQUALS_1] = {style: c.KEYWORD}, j.groupMapping[SEQ.entityDivider.groups.TEXT] = {style: c.TEXT}, j.groupMapping[SEQ.entityDivider.groups.EQUALS_2] = {style: c.KEYWORD}, j.groupMapping[SEQ.entityDivider.groups.COLOR_HEX] = {style: c.PARAMETER}, j.groupMapping[SEQ.entityDivider.groups.COLOR_NAME] = {style: c.PARAMETER}, j.progressStream = a, d.push(j);
        var k = {};
        k.regExp = SEQ.entityEntrySpacing.regExp, k.maxGroup = SEQ.entityEntrySpacing.groups.SPACING, k.groupMapping = {}, k.groupMapping[SEQ.entityEntrySpacing.groups.ENTRY_SPACING] = {style: c.KEYWORD}, k.groupMapping[SEQ.entityEntrySpacing.groups.SPACING] = {style: c.PARAMETER}, k.progressStream = a, d.push(k);
        var l = {};
        l.regExp = SEQ.entityFontFamily.regExp, l.maxGroup = SEQ.entityFontFamily.groups.NAME, l.groupMapping = {}, l.groupMapping[SEQ.entityFontFamily.groups.FONT_FAMILY] = {style: c.KEYWORD}, l.groupMapping[SEQ.entityFontFamily.groups.NAME] = {style: c.PARAMETER}, l.progressStream = a, d.push(l);
        var m = {};
        m.regExp = SEQ.entityFontSize.regExp, m.maxGroup = SEQ.entityFontSize.groups.SIZE, m.groupMapping = {}, m.groupMapping[SEQ.entityFontSize.groups.FONT_SIZE] = {style: c.KEYWORD}, m.groupMapping[SEQ.entityFontSize.groups.SIZE] = {style: c.PARAMETER}, m.progressStream = a, d.push(m);
        var n = {};
        n.regExp = SEQ.entityLinear.regExp, n.maxGroup = SEQ.entityLinear.groups.STATUS, n.groupMapping = {}, n.groupMapping[SEQ.entityLinear.groups.LINEAR] = {style: c.KEYWORD}, n.groupMapping[SEQ.entityLinear.groups.STATUS] = {style: c.PARAMETER}, n.progressStream = a, d.push(n);
        var o = {};
        o.regExp = SEQ.entityParallel.regExp, o.maxGroup = SEQ.entityParallel.groups.STATUS, o.groupMapping = {}, o.groupMapping[SEQ.entityParallel.groups.PARALLEL] = {style: c.KEYWORD}, o.groupMapping[SEQ.entityParallel.groups.STATUS] = {style: c.PARAMETER}, o.progressStream = a, d.push(o);
        var p = {};
        p.regExp = SEQ.entityParticipant.regExp, p.maxGroup = SEQ.entityParticipant.groups.COLOR_NAME, p.groupMapping = {}, p.groupMapping[SEQ.entityParticipant.groups.TYPE] = {style: c.KEYWORD}, p.groupMapping[SEQ.entityParticipant.groups.ICON_FONT_TYPE] = {style: c.KEYWORD}, p.groupMapping[SEQ.entityParticipant.groups.ICON_UNICODE] = {style: c.PARAMETER}, p.groupMapping[SEQ.entityParticipant.groups.QUOTE_1] = {style: c.KEYWORD}, p.groupMapping[SEQ.entityParticipant.groups.LONG_NAME] = {style: c.TEXT}, p.groupMapping[SEQ.entityParticipant.groups.QUOTE_2] = {style: c.KEYWORD}, p.groupMapping[SEQ.entityParticipant.groups.AS] = {style: c.KEYWORD}, p.groupMapping[SEQ.entityParticipant.groups.ALIAS] = {style: c.ACTOR}, p.groupMapping[SEQ.entityParticipant.groups.COLOR_HEX] = {style: c.PARAMETER}, p.groupMapping[SEQ.entityParticipant.groups.COLOR_NAME] = {style: c.PARAMETER}, p.progressStream = a, d.push(p);
        var q = {};
        q.regExp = SEQ.entityParticipantSpacing.regExp, q.maxGroup = SEQ.entityParticipantSpacing.groups.SPACING, q.groupMapping = {}, q.groupMapping[SEQ.entityParticipantSpacing.groups.PARTICIPANT_SPACING] = {style: c.KEYWORD}, q.groupMapping[SEQ.entityParticipantSpacing.groups.SPACING] = {style: c.PARAMETER}, q.progressStream = a, d.push(q);
        var r = {};
        r.regExp = SEQ.entitySpace.regExp, r.maxGroup = SEQ.entitySpace.groups.VALUE, r.groupMapping = {}, r.groupMapping[SEQ.entitySpace.groups.SPACE] = {style: c.KEYWORD}, r.groupMapping[SEQ.entitySpace.groups.VALUE] = {style: c.PARAMETER}, r.progressStream = a, d.push(r);
        var s = {};
        s.regExp = SEQ.entityTitle.regExp, s.maxGroup = SEQ.entityTitle.groups.VALUE, s.groupMapping = {}, s.groupMapping[SEQ.entityTitle.groups.TITLE] = {style: c.KEYWORD}, s.groupMapping[SEQ.entityTitle.groups.VALUE] = {style: c.TEXT}, s.progressStream = a, d.push(s);
        var t = {};
        t.regExp = SEQ.parser.regExpComment, t.maxGroup = 1, t.groupMapping = {}, t.groupMapping[1] = {style: c.COMMENT}, t.progressStream = a, d.push(t);
        var u = {};
        u.regExp = SEQ.entityCreateDestroy.regExp, u.maxGroup = SEQ.entityCreateDestroy.groups.PARTICIPANT, u.groupMapping = {}, u.groupMapping[SEQ.entityCreateDestroy.groups.TYPE] = {style: c.KEYWORD}, u.groupMapping[SEQ.entityCreateDestroy.groups.PARTICIPANT] = {style: c.ACTOR}, u.progressStream = a, d.push(u);
        var v = {};
        v.regExp = SEQ.entityActiveColor.regExp, v.maxGroup = SEQ.entityActiveColor.groups.COLOR_HEX, v.groupMapping = {}, v.groupMapping[SEQ.entityActiveColor.groups.ACTIVE_COLOR] = {style: c.KEYWORD}, v.groupMapping[SEQ.entityActiveColor.groups.PARTICIPANT] = {style: c.ACTOR}, v.groupMapping[SEQ.entityActiveColor.groups.COLOR_NAME] = {style: c.PARAMETER}, v.groupMapping[SEQ.entityActiveColor.groups.COLOR_HEX] = {style: c.PARAMETER}, v.progressStream = a, d.push(v);
        var w = {};
        w.regExp = SEQ.entityLifeLineColor.regExp, w.maxGroup = SEQ.entityLifeLineColor.groups.COLOR_HEX, w.groupMapping = {}, w.groupMapping[SEQ.entityLifeLineColor.groups.LIFE_LINE_COLOR] = {style: c.KEYWORD}, w.groupMapping[SEQ.entityLifeLineColor.groups.PARTICIPANT] = {style: c.ACTOR}, w.groupMapping[SEQ.entityLifeLineColor.groups.COLOR_NAME] = {style: c.PARAMETER}, w.groupMapping[SEQ.entityLifeLineColor.groups.COLOR_HEX] = {style: c.PARAMETER}, w.progressStream = a, d.push(w);
        var x = {};
        x.regExp = SEQ.entityLifeLineWeight.regExp, x.maxGroup = SEQ.entityLifeLineWeight.groups.VALUE, x.groupMapping = {}, x.groupMapping[SEQ.entityLifeLineWeight.groups.LIFE_LINE_WEIGHT] = {style: c.KEYWORD}, x.groupMapping[SEQ.entityLifeLineWeight.groups.VALUE] = {style: c.PARAMETER}, x.progressStream = a, d.push(x);
        var y = {};
        y.regExp = SEQ.entityParticipantGroup.regExp, y.maxGroup = SEQ.entityParticipantGroup.groups.END, y.groupMapping = {}, y.groupMapping[SEQ.entityParticipantGroup.groups.PARTICIPANT_GROUP] = {style: c.KEYWORD}, y.groupMapping[SEQ.entityParticipantGroup.groups.COLOR_HEX] = {style: c.PARAMETER}, y.groupMapping[SEQ.entityParticipantGroup.groups.COLOR_NAME] = {style: c.PARAMETER}, y.groupMapping[SEQ.entityParticipantGroup.groups.TITLE] = {style: c.TEXT}, y.groupMapping[SEQ.entityParticipantGroup.groups.END] = {style: c.KEYWORD}, y.progressStream = a, d.push(y);
        var z = {};
        z.regExp = SEQ.entityFrame.regExp, z.maxGroup = SEQ.entityFrame.groups.TEXT, z.groupMapping = {}, z.groupMapping[SEQ.entityFrame.groups.FRAME] = {style: c.KEYWORD}, z.groupMapping[SEQ.entityFrame.groups.COLOR_HEX_FRAGMENT] = {style: c.PARAMETER}, z.groupMapping[SEQ.entityFrame.groups.COLOR_NAME_FRAGMENT] = {style: c.PARAMETER}, z.groupMapping[SEQ.entityFrame.groups.COLOR_HEX_LABEL] = {style: c.PARAMETER}, z.groupMapping[SEQ.entityFrame.groups.COLOR_NAME_LABEL] = {style: c.PARAMETER}, z.groupMapping[SEQ.entityFrame.groups.TEXT] = {style: c.TEXT}, z.progressStream = a, d.push(z)
    }

    function b(a) {
        if (!a.sol()) return a.progressStream(a);
        for (var b = 0; b < d.length; b++) {
            var c = d[b], e = a.match(c.regExp, !1, !1);
            if (e) return a.match = e, a.currentGroup = 0, a.maxGroup = c.maxGroup, a.groupMapping = c.groupMapping, a.progressStream = c.progressStream, a.progressStream(a)
        }
        a.skipToEnd()
    }

    var c = {
        KEYWORD: "def",
        ACTOR: "tag",
        TEXT: "variable",
        COMMENT: "comment",
        ERROR: "error",
        ARROW: "keyword",
        PARAMETER: "bracket"
    }, d = [];
    return {
        init: function () {
            a(), CodeMirror.defineMode("seqdiamode", function () {
                return {token: b}
            })
        }
    }
}();